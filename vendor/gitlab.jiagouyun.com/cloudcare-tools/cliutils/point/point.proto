// Unless explicitly stated otherwise all files in this repository are licensed
// under the MIT License.
// This product includes software developed at Guance Cloud (https://www.guance.com/).
// Copyright 2021-present Guance, Inc.

// Definition of point in protobuf
// Generate: see pb.sh

syntax = "proto3";

option go_package = "/;point";
option java_multiple_files = true;
option java_outer_classname = "Point";

package point;

import "google/protobuf/any.proto";

// Debug used to attached some debug info for the point, these debug info
// will encoded into payload, storage can take optional handle on these debug
// info.
message Debug {
	string info = 1;
}

// example of pb.Any
message AnyDemo {
	string demo = 1;
}

message Field {
	enum MetricType {
		UNSPECIFIED = 0;
		COUNT = 1;
		RATE = 2;
		GAUGE = 3;
	}

	bytes key = 1;

	// For uint64/int64, json value type is string,
	// for []byte, json value is base64 encoded string.
	// See https://developers.google.com/protocol-buffers/docs/proto3#json
	oneof val {
			int64  i   = 2 [json_name = "i"];
			uint64 u   = 3 [json_name = "u"]; // unsigned int
			double f   = 4 [json_name = "f"]; // float64
			float f32  = 5 [json_name = "f32"]; // float32
			bool   b   = 6 [json_name = "b"];
			string s   = 7 [json_name = "s"]; // string
			bytes  d   = 8 [json_name = "d"]; // binary data bytes

			// XXX: not used
			google.protobuf.Any a = 9 [json_name = "a"]; // any data
	}

	MetricType type = 10;

	// field unit name
	string unit = 11; // metric unit, such as bytes(B), duration(ms/us) and so on.
}

message Tag {
	bytes key = 1;
	bytes val = 2;
}

// Warn used to attach some warning message during building the point.
message Warn {
	string type = 1 [json_name="type"];
	string msg = 2 [json_name="message"];
}

message PBPoint {
	bytes name           = 1;
	repeated Tag tags     = 2;
	repeated Field fields = 3;
	int64 time            = 4;

	// Auxiliary fields for the point, they should not
	// write to the final storage on production.
	repeated Warn warns   = 5;
	repeated Debug debugs = 6;
}

// Batch of PBPoint.
message PBPoints {
	repeated PBPoint points = 1;
}
