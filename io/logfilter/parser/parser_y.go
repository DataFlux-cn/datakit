// Code generated by goyacc -o parser_y.go -p yy parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"math"
	"time"
)

//line parser.y:11
type yySymType struct {
	yys   int
	node  Node
	nodes []Node

	item Item

	strings   []string
	float     float64
	duration  time.Duration
	timestamp time.Time
}

const EQ = 57346
const COLON = 57347
const SEMICOLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const ID = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const NUMBER = 57358
const RIGHT_BRACE = 57359
const RIGHT_BRACKET = 57360
const RIGHT_PAREN = 57361
const SPACE = 57362
const STRING = 57363
const QUOTED_STRING = 57364
const NAMESPACE = 57365
const DOT = 57366
const operatorsStart = 57367
const ADD = 57368
const DIV = 57369
const GTE = 57370
const GT = 57371
const LT = 57372
const LTE = 57373
const MOD = 57374
const MUL = 57375
const NEQ = 57376
const POW = 57377
const SUB = 57378
const operatorsEnd = 57379
const keywordsStart = 57380
const AS = 57381
const ASC = 57382
const AUTO = 57383
const BY = 57384
const DESC = 57385
const TRUE = 57386
const FALSE = 57387
const FILTER = 57388
const IDENTIFIER = 57389
const IN = 57390
const AND = 57391
const LINK = 57392
const LIMIT = 57393
const SLIMIT = 57394
const OR = 57395
const NIL = 57396
const NULL = 57397
const OFFSET = 57398
const SOFFSET = 57399
const ORDER = 57400
const RE = 57401
const INT = 57402
const FLOAT = 57403
const POINT = 57404
const TIMEZONE = 57405
const WITH = 57406
const keywordsEnd = 57407
const startSymbolsStart = 57408
const START_STMTS = 57409
const START_BINARY_EXPRESSION = 57410
const START_FUNC_EXPRESSION = 57411
const START_WHERE = 57412
const startSymbolsEnd = 57413

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQ",
	"COLON",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"ID",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"NAMESPACE",
	"DOT",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"POW",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"AS",
	"ASC",
	"AUTO",
	"BY",
	"DESC",
	"TRUE",
	"FALSE",
	"FILTER",
	"IDENTIFIER",
	"IN",
	"AND",
	"LINK",
	"LIMIT",
	"SLIMIT",
	"OR",
	"NIL",
	"NULL",
	"OFFSET",
	"SOFFSET",
	"ORDER",
	"RE",
	"INT",
	"FLOAT",
	"POINT",
	"TIMEZONE",
	"WITH",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"START_BINARY_EXPRESSION",
	"START_FUNC_EXPRESSION",
	"START_WHERE",
	"startSymbolsEnd",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:978

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 19,
	15, 145,
	-2, 68,
	-1, 20,
	15, 146,
	-2, 67,
	-1, 27,
	1, 2,
	10, 2,
	-2, 17,
	-1, 35,
	15, 145,
	-2, 19,
	-1, 36,
	15, 146,
	-2, 20,
	-1, 102,
	7, 89,
	17, 89,
	-2, 17,
	-1, 103,
	7, 90,
	17, 90,
	-2, 15,
	-1, 128,
	15, 145,
	-2, 19,
}

const yyPrivate = 57344

const yyLast = 574

var yyAct = [...]int{

	35, 38, 37, 19, 214, 55, 29, 112, 163, 125,
	175, 123, 45, 10, 198, 111, 30, 172, 57, 73,
	61, 60, 64, 73, 62, 249, 162, 36, 101, 242,
	20, 98, 56, 66, 31, 27, 76, 21, 159, 32,
	9, 199, 33, 231, 173, 14, 72, 54, 43, 94,
	72, 61, 6, 21, 192, 62, 234, 21, 24, 235,
	19, 73, 109, 204, 55, 114, 222, 171, 117, 91,
	128, 132, 118, 181, 106, 133, 134, 75, 115, 74,
	136, 137, 52, 25, 96, 95, 120, 20, 72, 119,
	102, 56, 53, 74, 21, 21, 55, 55, 103, 63,
	104, 77, 14, 46, 138, 131, 107, 46, 257, 251,
	166, 23, 43, 114, 22, 22, 165, 2, 3, 4,
	5, 24, 24, 56, 56, 229, 164, 160, 166, 202,
	52, 177, 228, 186, 165, 236, 180, 167, 154, 155,
	53, 201, 80, 81, 164, 220, 25, 25, 88, 89,
	185, 91, 92, 44, 166, 167, 245, 193, 26, 26,
	165, 73, 187, 52, 193, 184, 135, 258, 240, 114,
	164, 254, 117, 53, 190, 211, 200, 28, 189, 191,
	128, 167, 115, 209, 210, 196, 52, 188, 72, 179,
	102, 205, 170, 215, 166, 21, 53, 43, 103, 99,
	165, 178, 223, 219, 225, 226, 212, 24, 221, 166,
	216, 193, 177, 224, 158, 165, 17, 227, 44, 247,
	97, 167, 206, 253, 157, 164, 237, 239, 52, 197,
	99, 221, 25, 215, 243, 71, 167, 244, 53, 238,
	183, 246, 182, 81, 26, 250, 121, 126, 88, 89,
	79, 91, 78, 69, 153, 255, 65, 58, 139, 140,
	141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
	151, 152, 43, 7, 127, 42, 44, 170, 232, 218,
	193, 46, 24, 70, 59, 256, 52, 252, 195, 169,
	68, 1, 116, 51, 113, 217, 53, 41, 34, 176,
	39, 40, 194, 168, 49, 50, 110, 25, 124, 213,
	248, 241, 230, 43, 47, 48, 42, 44, 161, 26,
	129, 130, 46, 24, 108, 15, 12, 52, 11, 13,
	8, 122, 67, 100, 51, 105, 174, 53, 18, 16,
	233, 0, 0, 0, 0, 49, 50, 0, 25, 0,
	0, 0, 0, 0, 0, 47, 48, 126, 0, 207,
	26, 129, 130, 43, 0, 208, 42, 44, 0, 0,
	0, 0, 46, 24, 0, 0, 0, 52, 0, 43,
	176, 0, 42, 44, 51, 0, 0, 53, 46, 24,
	0, 0, 0, 52, 0, 49, 50, 0, 25, 0,
	51, 0, 0, 53, 0, 47, 48, 93, 0, 0,
	26, 49, 50, 0, 25, 0, 0, 0, 0, 0,
	0, 47, 48, 0, 0, 0, 26, 0, 0, 80,
	81, 82, 83, 86, 87, 88, 89, 90, 91, 92,
	93, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 156, 85, 0, 0, 0,
	0, 0, 80, 81, 82, 83, 86, 87, 88, 89,
	90, 91, 92, 43, 0, 0, 0, 44, 0, 0,
	0, 0, 46, 24, 0, 84, 0, 52, 0, 85,
	0, 0, 0, 0, 51, 93, 0, 53, 0, 0,
	0, 0, 0, 0, 0, 49, 50, 93, 25, 0,
	0, 0, 0, 0, 0, 47, 48, 80, 81, 82,
	83, 86, 87, 88, 89, 90, 91, 92, 0, 80,
	81, 82, 83, 86, 87, 88, 89, 90, 91, 92,
	84, 93, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 81, 82, 83, 86, 87, 88,
	89, 90, 91, 92,
}
var yyPact = [...]int{

	50, 263, 99, 367, 36, 244, -1000, -1000, 278, -1000,
	5, 75, -1000, 242, 244, 285, 238, 276, 100, 55,
	53, -1000, 99, 78, -1000, 237, 235, -1000, 491, 1,
	-1000, -1000, -1000, 61, 60, 55, 53, -1000, -1000, -1000,
	-1000, -1000, 367, -1000, -1000, 214, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 55, 53, -1000, 367, 99,
	99, -1000, -1000, 36, 20, 56, 242, 244, 231, 260,
	185, 276, 53, 55, 36, 36, 147, -1000, 86, 82,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 240, 36, 36, 436, -1000, -1000,
	207, -1000, -1000, -1000, -1000, -26, -1000, -1000, -32, 461,
	284, -1000, -1000, -1000, -1000, 183, -1000, -1000, 31, -7,
	-1000, 301, 182, -1000, -1000, -1000, 491, 461, 69, 227,
	225, -1000, -1000, -1000, -1000, -1000, 146, 131, 114, 216,
	34, 116, 116, 537, 503, 116, 116, 34, 34, 116,
	34, 216, 116, 461, -1000, -1000, -1000, -1000, 367, 244,
	99, -7, 12, 273, -1000, -1000, 55, 53, 283, 56,
	-1000, 213, -15, 202, 122, -1000, 403, 24, -1000, 260,
	204, 351, 36, 36, -1000, -1000, -1000, 157, -1000, -1000,
	-1000, -15, 36, 461, 272, 104, -1000, 30, -1000, 202,
	-1000, -1000, 301, 36, 36, -1000, -1000, 491, 461, 113,
	106, -1000, -9, 271, -1000, 16, -1000, 117, 160, -1000,
	224, 268, 211, -1000, -1000, -1000, -1000, 150, -1000, -1000,
	-28, 202, 36, -1000, -1000, -1000, -1000, -1000, 137, 203,
	-1000, -38, 202, -1000, -1000, -1000, 90, 282, -1000, 208,
	-1000, -1000, 155, 86, 280, 89, 151, -1000, -1000,
}
var yyPgo = [...]int{

	0, 12, 21, 340, 339, 0, 338, 336, 335, 333,
	18, 332, 331, 40, 330, 13, 329, 328, 326, 325,
	324, 318, 17, 14, 312, 311, 310, 16, 8, 4,
	309, 27, 31, 177, 28, 216, 11, 42, 308, 39,
	34, 9, 10, 15, 22, 306, 303, 302, 6, 301,
	1, 300, 2, 298, 297, 7, 295, 294, 292, 291,
}
var yyR1 = [...]int{

	0, 59, 59, 59, 59, 59, 59, 13, 13, 13,
	14, 14, 14, 33, 33, 33, 33, 33, 33, 48,
	48, 31, 31, 1, 1, 50, 51, 51, 49, 49,
	39, 37, 53, 53, 12, 12, 12, 12, 28, 28,
	28, 27, 27, 27, 27, 27, 27, 54, 36, 36,
	36, 36, 38, 38, 17, 17, 18, 2, 2, 8,
	8, 15, 16, 19, 19, 6, 35, 35, 35, 35,
	35, 35, 35, 11, 11, 7, 7, 7, 7, 42,
	42, 42, 42, 10, 10, 9, 9, 9, 9, 34,
	34, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 44, 44, 45, 45,
	46, 46, 46, 56, 56, 56, 47, 47, 47, 47,
	47, 47, 43, 43, 26, 26, 23, 23, 25, 25,
	22, 22, 24, 24, 20, 20, 21, 21, 30, 30,
	30, 29, 3, 3, 3, 4, 4, 52, 52, 58,
	58, 55, 55, 57, 57, 40, 40, 41, 41, 5,
	5, 5,
}
var yyR2 = [...]int{

	0, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 3, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 4, 3, 3, 3, 2, 1, 0, 3, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 5, 5, 3, 5, 1, 1, 1,
	3, 9, 3, 1, 2, 2, 1, 1, 1, 3,
	3, 3, 2, 4, 0, 1, 3, 2, 0, 1,
	1, 3, 3, 3, 0, 1, 3, 2, 0, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 0, 1, 0,
	2, 1, 0, 2, 1, 0, 2, 2, 4, 5,
	1, 0, 1, 1, 4, 0, 2, 0, 2, 0,
	2, 0, 2, 0, 2, 0, 3, 0, 3, 1,
	0, 2, 1, 1, 0, 1, 1, 1, 2, 10,
	5, 1, 2, 1, 1, 4, 4, 4, 4, 1,
	1, 4,
}
var yyChk = [...]int{

	-1000, -59, 67, 68, 69, 70, 2, 10, -14, -13,
	-15, -17, -18, -16, -37, -19, -4, -35, -6, -5,
	-31, -40, 15, 12, 22, 47, 59, -32, -33, -48,
	-27, -40, -39, -37, -53, -5, -31, -52, -50, -51,
	-49, -54, 15, 12, 16, -1, 21, 54, 55, 44,
	45, 33, 26, 36, -37, -5, -31, -10, 13, 6,
	-2, 46, 50, 24, -44, 14, -10, -11, 5, 15,
	7, -35, -31, -5, 24, 24, -15, 23, 15, 15,
	26, 27, 28, 29, 49, 53, 30, 31, 32, 33,
	34, 35, 36, 4, 48, 24, 24, -33, -32, 16,
	-9, -34, -32, -39, -13, -8, -15, -37, -20, 42,
	-45, -43, -55, -57, 9, -1, -58, -52, 16, -44,
	-10, 15, -12, -36, -38, -41, -33, 14, -5, 60,
	61, -40, -5, -5, -5, 19, -50, -50, 22, -33,
	-33, -33, -33, -33, -33, -33, -33, -33, -33, -33,
	-33, -33, -33, 14, -37, -37, 19, 17, 7, 64,
	-2, -21, 58, -28, -27, -48, -5, -31, -46, 5,
	9, 36, -22, 51, -7, -42, -33, -41, 19, 7,
	-28, 4, 15, 15, 19, 19, 19, -28, -34, -10,
	-15, -22, 42, 7, -47, 5, -43, 16, -23, 56,
	-52, 19, 7, 39, 39, -36, 18, -33, 14, -5,
	-5, 18, -23, -30, -29, -5, -27, -56, 7, -55,
	41, -1, 36, -52, -42, -5, -5, -28, 19, 19,
	-24, 52, 7, -3, 40, 43, 18, -55, 15, 16,
	18, -25, 57, -52, -29, 19, -52, 16, -26, 63,
	-52, 19, 5, 15, 16, -50, 5, 19, 16,
}
var yyDef = [...]int{

	0, -2, 0, 0, 0, 84, 6, 5, 1, 10,
	7, 8, 9, 107, 84, 74, 0, 63, 0, -2,
	-2, 66, 0, 159, 160, 0, 0, -2, 0, 43,
	13, 14, 15, 16, 18, -2, -2, 41, 42, 44,
	45, 46, 0, 159, 147, 0, 25, 26, 27, 28,
	29, 47, 23, 24, 3, 145, 146, 4, 88, 12,
	0, 57, 58, 0, 135, 109, 107, 84, 0, 37,
	72, 64, 67, 68, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 17, 148,
	0, 85, -2, -2, 11, 0, 59, 55, 137, 40,
	112, 108, 122, 123, 151, 0, 153, 154, 147, 131,
	62, 78, 0, 36, 48, 49, 50, 40, -2, 0,
	0, 70, 71, 21, 22, 69, 0, 0, 0, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 40, 32, 33, 30, 83, 87, 84,
	0, 131, 0, 134, 39, 43, 19, 20, 121, 111,
	152, 0, 127, 0, 0, 75, 79, 80, 31, 35,
	0, 0, 0, 0, 161, 155, 156, 0, 86, 56,
	60, 127, 140, 0, 115, 120, 110, 0, 54, 0,
	130, 73, 77, 0, 0, 34, 51, 52, 40, 0,
	0, 105, 133, 136, 139, 144, 38, 0, 114, 116,
	117, 0, 0, 126, 76, 81, 82, 0, 157, 158,
	129, 0, 0, 141, 142, 143, 106, 113, 0, 150,
	53, 125, 0, 132, 138, 118, 0, 0, 61, 0,
	128, 119, 0, 0, 0, 0, 0, 124, 149,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:136
		{
			yylex.(*parser).parseResult = yyDollar[2].node
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:140
		{
			yylex.(*parser).parseResult = yyDollar[2].node
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:144
		{
			yylex.(*parser).parseResult = yyDollar[2].node
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:148
		{
			yylex.(*parser).parseResult = yyDollar[2].nodes
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:153
		{
			yylex.(*parser).unexpected("", "")
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:159
		{
			yyVAL.node = yyDollar[1].node
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:161
		{
			yyVAL.node = yyDollar[1].node
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:163
		{
			yyVAL.node = yyDollar[1].node
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:167
		{
			yyVAL.node = Stmts{yyDollar[1].node}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:171
		{
			arr := yyDollar[1].node.(Stmts)
			arr = append(arr, yyDollar[3].node)
			yyVAL.node = arr
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:177
		{
			yyVAL.node = yyDollar[1].node
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:187
		{
			yyVAL.node = &Identifier{Name: yyDollar[1].item.Val}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:191
		{
			yyVAL.node = yyDollar[1].node
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:197
		{
			yyVAL.node = &AttrExpr{
				Obj:  &Identifier{Name: yyDollar[1].item.Val},
				Attr: &Identifier{Name: yyDollar[3].item.Val},
			}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:204
		{
			yyVAL.node = &AttrExpr{
				Obj:  yyDollar[1].node.(*AttrExpr),
				Attr: &Identifier{Name: yyDollar[3].item.Val},
			}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:217
		{
			yyVAL.node = &StringLiteral{Val: yylex.(*parser).unquoteString(yyDollar[1].item.Val)}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:223
		{
			yyVAL.node = &NilLiteral{}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:227
		{
			yyVAL.node = &NilLiteral{}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:233
		{
			yyVAL.node = &BoolLiteral{Val: true}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:237
		{
			yyVAL.node = &BoolLiteral{Val: false}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:243
		{
			yyVAL.node = &ParenExpr{Param: yyDollar[2].node}
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:249
		{
			yyVAL.node = yylex.(*parser).newFunc(yyDollar[1].item.Val, yyDollar[3].nodes)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:255
		{
			yyVAL.node = &CascadeFunctions{Funcs: []*FuncExpr{yyDollar[1].node.(*FuncExpr), yyDollar[3].node.(*FuncExpr)}}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:259
		{
			fc := yyDollar[1].node.(*CascadeFunctions)
			fc.Funcs = append(fc.Funcs, yyDollar[3].node.(*FuncExpr))
			yyVAL.node = fc
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:267
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:272
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:276
		{
			yyVAL.nodes = nil
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:282
		{
			nl := yyVAL.node.(NodeList)
			nl = append(nl, yyDollar[3].node)
			yyVAL.node = nl
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:288
		{
			yyVAL.node = NodeList{yyDollar[1].node}
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:292
		{
			yyVAL.node = NodeList{}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:306
		{
			yyVAL.node = &Star{}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:315
		{
			yyVAL.node = getFuncArgList(yyDollar[2].node.(NodeList))
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:321
		{
			yyVAL.node = &FuncArg{ArgName: yyDollar[1].item.Val, ArgVal: yyDollar[3].node}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:325
		{
			yyVAL.node = &FuncArg{
				ArgName: yyDollar[1].item.Val,
				ArgVal:  getFuncArgList(yyDollar[4].node.(NodeList)),
			}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:334
		{
			var cFuns *OuterFuncs
			chainFuncs, err := yylex.(*parser).newOuterFunc(cFuns, yyDollar[1].node.(*FuncExpr))
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			} else {
				switch chainFuncs.(type) {
				case *OuterFuncs:
					yyVAL.node = chainFuncs.(*OuterFuncs)
				case *Show:
					show := chainFuncs.(*Show)
					if yyDollar[2].nodes != nil {
						show.WhereCondition = yyDollar[2].nodes
					}
					if yyDollar[3].node != nil {
						show.TimeRange = yyDollar[3].node.(*TimeRange)
					}
					if yyDollar[4].node != nil {
						show.Limit = yyDollar[4].node.(*Limit)
					}
					if yyDollar[5].node != nil {
						show.Offset = yyDollar[5].node.(*Offset)
					}
					yyVAL.node = show
				case *DeleteFunc:
					yyVAL.node = chainFuncs.(*DeleteFunc)
				default:
					yylex.(*parser).addParseErr(nil, fmt.Errorf("outer func error"))
				}
			}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:366
		{
			cFuns := yyDollar[1].node.(*OuterFuncs)
			chainFuncs, err := yylex.(*parser).newOuterFunc(cFuns, yyDollar[3].node.(*FuncExpr))
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			}
			yyVAL.node = chainFuncs.(*OuterFuncs)
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:378
		{
			m := yylex.(*parser).newLambda(yyDollar[1].node.(*DFQuery), yyDollar[2].item, yyDollar[5].nodes)
			for _, n := range yyDollar[3].nodes {
				m.Right = append(m.Right, n.(*DFQuery))
			}
			yyVAL.node = m
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:388
		{
			yyVAL.item = Item{Typ: FILTER}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:392
		{
			yyVAL.item = Item{Typ: LINK}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:398
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:402
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 61:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:408
		{
			m := yyDollar[1].node.(*DFQuery)

			if yyDollar[2].node != nil {
				m.TimeRange = yyDollar[2].node.(*TimeRange)
			}

			if yyDollar[3].node != nil {
				m.GroupBy = yyDollar[3].node.(*GroupBy)
			}

			if yyDollar[4].node != nil {
				m.OrderBy = yyDollar[4].node.(*OrderBy)
			}

			if yyDollar[5].node != nil {
				m.Limit = yyDollar[5].node.(*Limit)
			}

			if yyDollar[6].node != nil {
				m.Offset = yyDollar[6].node.(*Offset)
			}

			if yyDollar[7].node != nil {
				m.SLimit = yyDollar[7].node.(*SLimit)
			}

			if yyDollar[8].node != nil {
				m.SOffset = yyDollar[8].node.(*SOffset)
			}

			if yyDollar[9].node != nil {
				m.TimeZone = yyDollar[9].node.(*TimeZone)
			}

			yyVAL.node = m
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:448
		{
			m := yyDollar[1].node.(*DFQuery)
			m.Targets = yylex.(*parser).newTargets(yyDollar[2].nodes)
			m.WhereCondition = yyDollar[3].nodes
			yyVAL.node = m
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:457
		{
			yyVAL.node = yyDollar[1].node
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:461
		{
			q := yyDollar[2].node.(*DFQuery)
			q.Namespace = yyDollar[1].item.Val
			yyVAL.node = q
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:469
		{
			yyVAL.item = yyDollar[1].item
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:475
		{
			q, err := yylex.(*parser).newQuery(yyDollar[1].node)
			if err != nil {
				log.Errorf("newQuery: %s", err)
			}
			yyVAL.node = q
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:483
		{
			// FIXME: only func:: support attr_expr in from-clause
			x := yyDollar[1].node.(*AttrExpr)
			q, err := yylex.(*parser).newQuery(&StringLiteral{Val: fmt.Sprintf("%s__%s", x.Obj, x.Attr)})
			if err != nil {
				log.Errorf("newQuery: %s", err)
			}
			yyVAL.node = q
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:493
		{
			q, err := yylex.(*parser).newQuery(yyDollar[1].item)
			if err != nil {
				log.Errorf("newQuery: %s", err)
			}
			yyVAL.node = q
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:501
		{
			yyVAL.node = yylex.(*parser).newSubquery(yyDollar[2].node.(*DFQuery))
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:505
		{
			q := yyDollar[1].node.(*DFQuery)
			if err := q.appendFrom(yyDollar[3].node); err != nil {
				log.Debugf("appendFrom: %s", err.Error())
			}
			yyVAL.node = q
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:513
		{
			q := yyDollar[1].node.(*DFQuery)
			if err := q.appendFrom(yyDollar[3].item.Val); err != nil {
				log.Debugf("appendFrom: %s", err.Error())
			}
			yyVAL.node = q
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:521
		{
			yyVAL.node = yyDollar[1].node
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:527
		{
			yyVAL.nodes = yyDollar[3].nodes
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:531
		{
			yyVAL.nodes = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:535
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:539
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:544
		{
			yyVAL.nodes = nil
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:548
		{
			nl, err := yylex.(*parser).newTarget(yyDollar[1].node, "")
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			}
			yyVAL.node = nl
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:556
		{
			nl, err := yylex.(*parser).newTarget(yyDollar[1].node, "")
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			}
			yyVAL.node = nl
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:564
		{
			nl, err := yylex.(*parser).newTarget(yyDollar[1].node, yyDollar[3].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			}
			yyVAL.node = nl
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:572
		{
			nl, err := yylex.(*parser).newTarget(yyDollar[1].node, yyDollar[3].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			}
			yyVAL.node = nl
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:582
		{
			yyVAL.nodes = yylex.(*parser).newWhereConditions(yyDollar[2].nodes)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:586
		{
			yyVAL.nodes = yylex.(*parser).newWhereConditions(nil)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:593
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:597
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:602
		{
			yyVAL.nodes = nil
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:609
		{
			yyVAL.node = yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:613
		{
			yyVAL.node = yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:617
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:623
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:629
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:635
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:641
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:647
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:653
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:658
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:663
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:669
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:674
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:679
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:685
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:693
		{
			yyVAL.node = yylex.(*parser).newTimeRangeOpt(yyDollar[2].node, yyDollar[3].node, yyDollar[4].node, yyDollar[5].duration)
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:697
		{
			yyVAL.node = yylex.(*parser).newTimeRangeOpt(nil, nil, nil, time.Duration(0))
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:703
		{
			yyVAL.node = yyDollar[1].node
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:705
		{
			yyVAL.node = nil
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:709
		{
			yyVAL.node = yyDollar[2].node
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:711
		{
			yyVAL.node = nil
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:713
		{
			yyVAL.node = nil
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:717
		{
			yyVAL.duration = yyDollar[2].duration
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:719
		{
			yyVAL.duration = time.Duration(0)
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:721
		{
			yyVAL.duration = time.Duration(0)
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:725
		{
			yyVAL.node = &TimeResolution{Duration: yyDollar[2].duration}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:729
		{
			yyVAL.node = yylex.(*parser).newTimeResolution(nil, true) // Deprecated
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:733
		{
			yyVAL.node = yylex.(*parser).newTimeResolution(nil, false)
		}
	case 119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:737
		{
			yyVAL.node = yylex.(*parser).newTimeResolution(yyDollar[4].node.(*NumberLiteral), false)
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:741
		{
			yyVAL.node = nil
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:743
		{
			yyVAL.node = nil
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:747
		{
			yyVAL.node = yylex.(*parser).newTimeExpr(&TimeExpr{IsDuration: true, Duration: yyDollar[1].duration})
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:751
		{
			yyVAL.node = yylex.(*parser).newTimeExpr(&TimeExpr{Time: yyDollar[1].timestamp})
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:757
		{
			yyVAL.node = yylex.(*parser).newTimeZone(yyDollar[3].node.(*StringLiteral))
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:761
		{
			yyVAL.node = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:765
		{
			yyVAL.node = yylex.(*parser).newOffset(yyDollar[2].node.(*NumberLiteral))
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:769
		{
			yyVAL.node = yylex.(*parser).newOffset(nil)
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:775
		{
			yyVAL.node = yylex.(*parser).newSOffset(yyDollar[2].node.(*NumberLiteral))
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:779
		{
			yyVAL.node = yylex.(*parser).newSOffset(nil)
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:785
		{
			yyVAL.node = yylex.(*parser).newLimit(yyDollar[2].node.(*NumberLiteral))
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:789
		{
			yyVAL.node = yylex.(*parser).newLimit(nil)
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:795
		{
			yyVAL.node = yylex.(*parser).newSLimit(yyDollar[2].node.(*NumberLiteral))
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:799
		{
			yyVAL.node = yylex.(*parser).newSLimit(nil)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:806
		{
			nl := yyDollar[2].node.(NodeList)
			if len(nl) == 0 {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "group by list empty")
			}

			yyVAL.node = &GroupBy{List: nl}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:815
		{
			yyVAL.node = nil
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:820
		{
			yyVAL.node = yylex.(*parser).newOrderBy(yyDollar[3].node.(NodeList))
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:824
		{
			yyVAL.node = yylex.(*parser).newOrderBy(nil)
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:830
		{
			nl := yyDollar[1].node.(NodeList)
			nl = append(nl, yyDollar[3].node)
			yyVAL.node = nl
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:836
		{
			yyVAL.node = NodeList{yyDollar[1].node}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:840
		{
			yyVAL.node = NodeList{}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:846
		{
			yyVAL.node = yylex.(*parser).newOrderByElem(yyDollar[1].item.Val, yyDollar[2].item)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:853
		{
			yyVAL.item = Item{Typ: ASC}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:858
		{
			yyVAL.item = yyDollar[1].item
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:862
		{
			yyVAL.item = Item{Val: yyDollar[1].node.(*AttrExpr).String()}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:869
		{
			yyVAL.node = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:873
		{
			num := yylex.(*parser).number(yyDollar[2].item.Val)
			switch yyDollar[1].item.Typ {
			case ADD: // pass
			case SUB:
				if num.IsInt {
					num.Int = -num.Int
				} else {
					num.Float = -num.Float
				}
			}
			yyVAL.node = num
		}
	case 149:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:889
		{
			timestr := fmt.Sprintf("%s-%02s-%02s %02s:%02s:%02s", yyDollar[1].item.Val, yyDollar[3].item.Val, yyDollar[5].item.Val, yyDollar[6].item.Val, yyDollar[8].item.Val, yyDollar[10].item.Val)
			t, err := time.ParseInLocation("2006-01-02 15:04:05", timestr, time.UTC)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid date string: %s", timestr)
			}

			yyVAL.timestamp = t
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:899
		{
			timestr := fmt.Sprintf("%s-%02s-%02s", yyDollar[1].item.Val, yyDollar[3].item.Val, yyDollar[5].item.Val)
			t, err := time.ParseInLocation("2006-01-02", timestr, time.UTC)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid date string: %s", timestr)
			}
			yyVAL.timestamp = t
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:910
		{
			du, err := yylex.(*parser).parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			} else {
				yyVAL.duration = du
			}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:919
		{
			du, err := yylex.(*parser).parseDuration(yyDollar[2].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[2].item.PositionRange(), err)
			} else {
				switch yyDollar[1].item.Typ {
				case ADD:
					yyVAL.duration = du
				case SUB:
					yyVAL.duration = -du
				}
			}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:936
		{
			nl := yyDollar[1].node.(*NumberLiteral)
			var t time.Time
			if nl.IsInt {
				t = time.Unix(nl.Int, 0)
			} else {
				i, f := math.Modf(nl.Float)
				t = time.Unix(int64(i), int64(f*float64(time.Second)))
			}
			yyVAL.timestamp = t
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:950
		{
			yyVAL.node = &Regex{Regex: yyDollar[3].node.(*StringLiteral).Val}
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:954
		{
			yyVAL.node = &Regex{Regex: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:960
		{
			yyVAL.node = &StaticCast{IsInt: true, Val: &Identifier{Name: yyDollar[3].item.Val}}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:964
		{
			yyVAL.node = &StaticCast{IsFloat: true, Val: &Identifier{Name: yyDollar[3].item.Val}}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:971
		{
			yyVAL.item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:975
		{
			yyVAL.item.Val = yyDollar[3].node.(*StringLiteral).Val
		}
	}
	goto yystack /* stack new state and value */
}
