// Code generated by goyacc -o gram.y.go gram.y. DO NOT EDIT.

//line gram.y:2
package logfilter

import __yyfmt__ "fmt"

//line gram.y:2

import (
	"time"
)

//line gram.y:9
type yySymType struct {
	yys   int
	node  Node
	nodes []Node

	item Item

	strings   []string
	float     float64
	duration  time.Duration
	timestamp time.Time
}

const EQ = 57346
const COLON = 57347
const SEMICOLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const ID = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const NUMBER = 57358
const RIGHT_BRACE = 57359
const RIGHT_BRACKET = 57360
const RIGHT_PAREN = 57361
const SPACE = 57362
const STRING = 57363
const QUOTED_STRING = 57364
const NAMESPACE = 57365
const DOT = 57366
const operatorsStart = 57367
const ADD = 57368
const DIV = 57369
const GTE = 57370
const GT = 57371
const LT = 57372
const LTE = 57373
const MOD = 57374
const MUL = 57375
const NEQ = 57376
const POW = 57377
const SUB = 57378
const operatorsEnd = 57379
const keywordsStart = 57380
const AS = 57381
const ASC = 57382
const AUTO = 57383
const BY = 57384
const DESC = 57385
const TRUE = 57386
const FALSE = 57387
const FILTER = 57388
const IDENTIFIER = 57389
const IN = 57390
const AND = 57391
const LINK = 57392
const LIMIT = 57393
const SLIMIT = 57394
const OR = 57395
const NIL = 57396
const NULL = 57397
const OFFSET = 57398
const SOFFSET = 57399
const ORDER = 57400
const RE = 57401
const INT = 57402
const FLOAT = 57403
const POINT = 57404
const TIMEZONE = 57405
const WITH = 57406
const keywordsEnd = 57407
const startSymbolsStart = 57408
const START_STMTS = 57409
const START_BINARY_EXPRESSION = 57410
const START_FUNC_EXPRESSION = 57411
const START_WHERE_CONDITION = 57412
const startSymbolsEnd = 57413

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQ",
	"COLON",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"ID",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"NAMESPACE",
	"DOT",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"POW",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"AS",
	"ASC",
	"AUTO",
	"BY",
	"DESC",
	"TRUE",
	"FALSE",
	"FILTER",
	"IDENTIFIER",
	"IN",
	"AND",
	"LINK",
	"LIMIT",
	"SLIMIT",
	"OR",
	"NIL",
	"NULL",
	"OFFSET",
	"SOFFSET",
	"ORDER",
	"RE",
	"INT",
	"FLOAT",
	"POINT",
	"TIMEZONE",
	"WITH",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"START_BINARY_EXPRESSION",
	"START_FUNC_EXPRESSION",
	"START_WHERE_CONDITION",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line gram.y:428

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 10,
	7, 51,
	17, 51,
	-2, 9,
	-1, 11,
	7, 52,
	17, 52,
	-2, 7,
	-1, 19,
	15, 68,
	-2, 11,
	-1, 20,
	15, 69,
	-2, 12,
	-1, 99,
	15, 68,
	-2, 11,
}

const yyPrivate = 57344

const yyLast = 334

var yyAct = [...]int{
	12, 19, 28, 13, 15, 101, 95, 20, 3, 22,
	17, 57, 29, 43, 44, 58, 59, 60, 9, 51,
	52, 44, 54, 55, 11, 10, 51, 52, 54, 54,
	109, 64, 63, 62, 61, 33, 93, 30, 111, 33,
	112, 107, 108, 106, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 63, 11,
	10, 69, 68, 87, 87, 90, 91, 97, 99, 88,
	88, 113, 86, 89, 113, 92, 2, 100, 67, 113,
	66, 42, 121, 65, 84, 116, 104, 4, 103, 102,
	114, 41, 105, 7, 1, 25, 18, 21, 23, 24,
	104, 16, 103, 102, 110, 96, 105, 6, 5, 94,
	97, 99, 117, 8, 27, 104, 115, 103, 119, 32,
	104, 105, 103, 102, 120, 28, 105, 118, 14, 31,
	0, 0, 0, 0, 33, 29, 0, 0, 28, 39,
	98, 14, 31, 0, 0, 0, 38, 33, 29, 40,
	0, 0, 39, 0, 0, 0, 0, 36, 37, 38,
	30, 0, 40, 0, 0, 0, 0, 34, 35, 0,
	36, 37, 26, 30, 28, 0, 0, 14, 31, 0,
	34, 35, 0, 33, 29, 26, 0, 0, 39, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 40, 0,
	56, 0, 0, 0, 0, 0, 36, 37, 0, 30,
	0, 0, 0, 0, 0, 85, 34, 35, 0, 0,
	0, 26, 43, 44, 45, 46, 49, 50, 51, 52,
	53, 54, 55, 28, 0, 0, 0, 31, 0, 0,
	0, 0, 33, 29, 0, 47, 0, 39, 0, 48,
	0, 0, 0, 0, 38, 56, 0, 40, 0, 0,
	0, 0, 0, 0, 0, 36, 37, 56, 30, 0,
	0, 0, 0, 0, 0, 34, 35, 43, 44, 45,
	46, 49, 50, 51, 52, 53, 54, 55, 0, 43,
	44, 45, 46, 49, 50, 51, 52, 53, 54, 55,
	47, 56, 0, 0, 48, 0, 0, 0, 0, 0,
	0, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 44, 45, 46, 49, 50, 51,
	52, 53, 54, 55,
}

var yyPact = [...]int{
	6, 77, 80, -1000, -1000, -1000, -1000, 162, 74, -1000,
	-1000, -1000, 251, -37, 162, -1000, -1000, 10, 9, 8,
	7, -1000, -1000, -1000, -1000, -1000, 68, 65, -1000, -1000,
	63, -1000, 46, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 70, 196, -1000,
	-1000, -10, -10, -10, -10, 14, 126, 18, -1000, -1000,
	-6, -7, -13, -13, 297, 263, -13, -13, -7, -7,
	-13, -7, -6, -13, 221, -1000, -1000, 8, 7, -1000,
	-1000, -1000, 24, 22, 23, -1000, -1000, 251, 221, 34,
	21, 72, -1000, -1000, 8, 7, -1000, -1000, -1000, 126,
	67, 113, -1000, 221, -1000, -1000, -1000, 251, 221, -1000,
	64, -1000,
}

var yyPgo = [...]int{
	0, 119, 114, 1, 113, 109, 108, 107, 4, 5,
	7, 17, 0, 6, 10, 105, 16, 18, 101, 3,
	99, 9, 98, 97, 96, 95, 94,
}

var yyR1 = [...]int{
	0, 26, 26, 26, 6, 12, 12, 12, 12, 12,
	12, 19, 19, 10, 10, 1, 1, 21, 22, 22,
	20, 20, 16, 14, 24, 24, 5, 5, 5, 5,
	9, 9, 9, 8, 8, 8, 8, 8, 8, 25,
	13, 13, 13, 15, 15, 7, 7, 4, 4, 4,
	4, 17, 17, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 2, 2,
	23, 23, 18, 18, 3, 3, 3,
}

var yyR2 = [...]int{
	0, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 4, 3, 3, 3, 2, 1, 0,
	3, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 5, 3, 0, 1, 3, 2,
	0, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 1, 1,
	1, 2, 4, 4, 1, 1, 4,
}

var yyChk = [...]int{
	-1000, -26, 70, 2, 10, -6, -7, 13, -4, -17,
	-11, -16, -12, -19, 15, -8, -18, -14, -24, -3,
	-10, -23, -21, -22, -20, -25, 59, -2, 12, 22,
	47, 16, -1, 21, 54, 55, 44, 45, 33, 26,
	36, 17, 7, 26, 27, 28, 29, 49, 53, 30,
	31, 32, 33, 34, 35, 36, 4, 48, -12, -16,
	-11, 24, 24, 24, 24, 15, 15, 15, 16, -17,
	-12, -12, -12, -12, -12, -12, -12, -12, -12, -12,
	-12, -12, -12, -12, 14, 19, -14, -3, -10, -14,
	-3, -3, -21, 22, -5, -13, -15, -12, 14, -3,
	-21, -9, -8, -19, -3, -10, 19, 19, 19, 7,
	-9, 4, 19, 7, 18, -13, 18, -12, 14, -8,
	-9, 18,
}

var yyDef = [...]int{
	0, -2, 46, 3, 2, 1, 4, 50, 0, 47,
	-2, -2, 0, 35, 0, 5, 6, 8, 10, -2,
	-2, 33, 34, 36, 37, 38, 0, 0, 74, 75,
	0, 70, 0, 17, 18, 19, 20, 21, 39, 15,
	16, 45, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 7,
	9, 0, 0, 0, 0, 0, 29, 0, 71, 48,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 32, 22, 24, 68, 69, 25,
	13, 14, 0, 0, 0, 28, 40, 41, 32, -2,
	0, 0, 31, 35, 11, 12, 72, 73, 23, 27,
	0, 0, 76, 0, 67, 26, 42, 43, 32, 30,
	0, 44,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:101
		{
			yylex.(*parser).parseResult = yyDollar[2].node
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:106
		{
			yylex.(*parser).unexpected("", "")
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:112
		{
			yyVAL.node = yyDollar[1].node
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:120
		{
			yyVAL.node = &Identifier{Name: yyDollar[1].item.Val}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:124
		{
			yyVAL.node = yyDollar[1].node
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:130
		{
			yyVAL.node = &AttrExpr{
				Obj:  &Identifier{Name: yyDollar[1].item.Val},
				Attr: &Identifier{Name: yyDollar[3].item.Val},
			}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:137
		{
			yyVAL.node = &AttrExpr{
				Obj:  yyDollar[1].node.(*AttrExpr),
				Attr: &Identifier{Name: yyDollar[3].item.Val},
			}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:150
		{
			yyVAL.node = &StringLiteral{Val: yylex.(*parser).unquoteString(yyDollar[1].item.Val)}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:156
		{
			yyVAL.node = &NilLiteral{}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:160
		{
			yyVAL.node = &NilLiteral{}
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:166
		{
			yyVAL.node = &BoolLiteral{Val: true}
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:170
		{
			yyVAL.node = &BoolLiteral{Val: false}
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:176
		{
			yyVAL.node = &ParenExpr{Param: yyDollar[2].node}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:182
		{
			yyVAL.node = yylex.(*parser).newFunc(yyDollar[1].item.Val, yyDollar[3].nodes)
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:188
		{
			yyVAL.node = &CascadeFunctions{Funcs: []*FuncExpr{yyDollar[1].node.(*FuncExpr), yyDollar[3].node.(*FuncExpr)}}
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:192
		{
			fc := yyDollar[1].node.(*CascadeFunctions)
			fc.Funcs = append(fc.Funcs, yyDollar[3].node.(*FuncExpr))
			yyVAL.node = fc
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:200
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:205
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:209
		{
			yyVAL.nodes = nil
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:215
		{
			nl := yyVAL.node.(NodeList)
			nl = append(nl, yyDollar[3].node)
			yyVAL.node = nl
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:221
		{
			yyVAL.node = NodeList{yyDollar[1].node}
		}
	case 32:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:225
		{
			yyVAL.node = NodeList{}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:239
		{
			yyVAL.node = &Star{}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:247
		{
			yyVAL.node = getFuncArgList(yyDollar[2].node.(NodeList))
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:253
		{
			yyVAL.node = &FuncArg{ArgName: yyDollar[1].item.Val, ArgVal: yyDollar[3].node}
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:257
		{
			yyVAL.node = &FuncArg{
				ArgName: yyDollar[1].item.Val,
				ArgVal:  getFuncArgList(yyDollar[4].node.(NodeList)),
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:266
		{
			yyVAL.node = yylex.(*parser).newWhereConditions(yyDollar[2].nodes)
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:270
		{
			yyVAL.node = yylex.(*parser).newWhereConditions(nil)
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:277
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:281
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line gram.y:286
		{
			yyVAL.nodes = nil
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:293
		{
			yyVAL.node = yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:297
		{
			yyVAL.node = yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:301
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:307
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:313
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:319
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:325
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:331
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:337
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:342
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:347
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:353
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:358
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line gram.y:363
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line gram.y:369
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:378
		{
			yyVAL.item = yyDollar[1].item
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:382
		{
			yyVAL.item = Item{Val: yyDollar[1].node.(*AttrExpr).String()}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:389
		{
			yyVAL.node = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line gram.y:393
		{
			num := yylex.(*parser).number(yyDollar[2].item.Val)
			switch yyDollar[1].item.Typ {
			case ADD: // pass
			case SUB:
				if num.IsInt {
					num.Int = -num.Int
				} else {
					num.Float = -num.Float
				}
			}
			yyVAL.node = num
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:410
		{
			yyVAL.node = &Regex{Regex: yyDollar[3].node.(*StringLiteral).Val}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:414
		{
			yyVAL.node = &Regex{Regex: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line gram.y:421
		{
			yyVAL.item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line gram.y:425
		{
			yyVAL.item.Val = yyDollar[3].node.(*StringLiteral).Val
		}
	}
	goto yystack /* stack new state and value */
}
