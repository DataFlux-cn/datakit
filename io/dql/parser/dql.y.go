// Code generated by goyacc -o dql/parser/dql.y.go dql/parser/dql.y. DO NOT EDIT.

//line dql/parser/dql.y:2
package parser

import __yyfmt__ "fmt"

//line dql/parser/dql.y:2

import (
	"fmt"
	"math"
	"time"
)

//line dql/parser/dql.y:11
type yySymType struct {
	yys   int
	node  Node
	nodes []Node

	item Item

	strings   []string
	float     float64
	duration  time.Duration
	timestamp time.Time
}

const EQ = 57346
const COLON = 57347
const SEMICOLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const ID = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const NUMBER = 57358
const RIGHT_BRACE = 57359
const RIGHT_BRACKET = 57360
const RIGHT_PAREN = 57361
const SPACE = 57362
const STRING = 57363
const QUOTED_STRING = 57364
const NAMESPACE = 57365
const DOT = 57366
const operatorsStart = 57367
const ADD = 57368
const DIV = 57369
const GTE = 57370
const GT = 57371
const LT = 57372
const LTE = 57373
const MOD = 57374
const MUL = 57375
const NEQ = 57376
const POW = 57377
const SUB = 57378
const operatorsEnd = 57379
const keywordsStart = 57380
const AS = 57381
const ASC = 57382
const AUTO = 57383
const BY = 57384
const DESC = 57385
const TRUE = 57386
const FALSE = 57387
const FILTER = 57388
const IDENTIFIER = 57389
const IN = 57390
const AND = 57391
const LINK = 57392
const LIMIT = 57393
const SLIMIT = 57394
const OR = 57395
const NIL = 57396
const NULL = 57397
const OFFSET = 57398
const SOFFSET = 57399
const ORDER = 57400
const RE = 57401
const INT = 57402
const FLOAT = 57403
const POINT = 57404
const TIMEZONE = 57405
const WITH = 57406
const keywordsEnd = 57407
const startSymbolsStart = 57408
const START_STMTS = 57409
const START_BINARY_EXPRESSION = 57410
const START_FUNC_EXPRESSION = 57411
const startSymbolsEnd = 57412

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQ",
	"COLON",
	"SEMICOLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"ID",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SPACE",
	"STRING",
	"QUOTED_STRING",
	"NAMESPACE",
	"DOT",
	"operatorsStart",
	"ADD",
	"DIV",
	"GTE",
	"GT",
	"LT",
	"LTE",
	"MOD",
	"MUL",
	"NEQ",
	"POW",
	"SUB",
	"operatorsEnd",
	"keywordsStart",
	"AS",
	"ASC",
	"AUTO",
	"BY",
	"DESC",
	"TRUE",
	"FALSE",
	"FILTER",
	"IDENTIFIER",
	"IN",
	"AND",
	"LINK",
	"LIMIT",
	"SLIMIT",
	"OR",
	"NIL",
	"NULL",
	"OFFSET",
	"SOFFSET",
	"ORDER",
	"RE",
	"INT",
	"FLOAT",
	"POINT",
	"TIMEZONE",
	"WITH",
	"keywordsEnd",
	"startSymbolsStart",
	"START_STMTS",
	"START_BINARY_EXPRESSION",
	"START_FUNC_EXPRESSION",
	"startSymbolsEnd",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line dql/parser/dql.y:974

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 18,
	15, 144,
	-2, 67,
	-1, 19,
	15, 145,
	-2, 66,
	-1, 26,
	1, 2,
	10, 2,
	-2, 16,
	-1, 34,
	15, 144,
	-2, 18,
	-1, 35,
	15, 145,
	-2, 19,
	-1, 116,
	7, 88,
	17, 88,
	-2, 16,
	-1, 117,
	7, 89,
	17, 89,
	-2, 14,
	-1, 126,
	15, 144,
	-2, 18,
}

const yyPrivate = 57344

const yyLast = 528

var yyAct = [...]int{

	34, 37, 36, 18, 212, 54, 35, 44, 106, 19,
	123, 55, 31, 105, 173, 195, 121, 96, 71, 168,
	115, 26, 71, 28, 70, 57, 9, 61, 70, 247,
	158, 63, 58, 159, 240, 8, 59, 196, 92, 229,
	5, 22, 169, 58, 21, 189, 232, 59, 74, 233,
	155, 23, 42, 103, 108, 21, 27, 18, 71, 202,
	29, 54, 23, 19, 70, 111, 220, 55, 126, 130,
	109, 51, 167, 131, 132, 73, 24, 117, 134, 135,
	72, 52, 116, 89, 100, 94, 218, 24, 25, 179,
	93, 113, 98, 30, 54, 54, 20, 118, 95, 25,
	55, 55, 43, 60, 162, 2, 3, 4, 45, 72,
	163, 20, 51, 43, 75, 20, 243, 255, 42, 42,
	45, 136, 52, 51, 124, 156, 162, 161, 23, 23,
	175, 249, 163, 52, 227, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 161,
	20, 20, 162, 24, 24, 200, 226, 71, 163, 178,
	184, 183, 129, 70, 160, 25, 32, 199, 111, 13,
	182, 53, 197, 109, 133, 161, 174, 188, 126, 193,
	234, 207, 208, 187, 117, 185, 160, 186, 256, 116,
	213, 162, 198, 108, 203, 190, 177, 163, 190, 221,
	219, 217, 223, 224, 210, 190, 238, 162, 176, 209,
	51, 175, 160, 163, 161, 222, 204, 252, 171, 16,
	52, 245, 166, 13, 219, 235, 237, 101, 170, 97,
	161, 213, 241, 194, 124, 242, 205, 69, 97, 244,
	225, 251, 236, 248, 181, 42, 180, 125, 41, 43,
	20, 214, 119, 253, 45, 23, 77, 174, 76, 51,
	152, 153, 67, 151, 78, 79, 50, 160, 62, 52,
	86, 87, 108, 89, 90, 64, 6, 48, 49, 112,
	24, 42, 166, 230, 41, 43, 216, 46, 47, 51,
	45, 23, 25, 127, 128, 51, 190, 68, 79, 52,
	56, 254, 50, 86, 87, 52, 89, 250, 192, 165,
	1, 66, 110, 48, 49, 107, 24, 42, 215, 206,
	41, 43, 40, 46, 47, 33, 45, 23, 25, 127,
	128, 51, 38, 42, 39, 191, 41, 43, 50, 164,
	104, 52, 45, 23, 122, 211, 246, 51, 239, 48,
	49, 228, 24, 157, 50, 102, 14, 52, 11, 46,
	47, 91, 10, 12, 25, 48, 49, 7, 24, 120,
	65, 114, 99, 172, 17, 46, 47, 15, 231, 0,
	25, 0, 0, 78, 79, 80, 81, 84, 85, 86,
	87, 88, 89, 90, 91, 0, 201, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 154,
	83, 0, 0, 0, 0, 0, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 42, 0, 0,
	0, 43, 0, 0, 0, 0, 45, 23, 0, 82,
	0, 51, 0, 83, 0, 0, 0, 0, 50, 91,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 48,
	49, 91, 24, 0, 0, 0, 0, 0, 0, 46,
	47, 78, 79, 80, 81, 84, 85, 86, 87, 88,
	89, 90, 0, 78, 79, 80, 81, 84, 85, 86,
	87, 88, 89, 90, 82, 91, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 80,
	81, 84, 85, 86, 87, 88, 89, 90,
}
var yyPact = [...]int{

	38, 266, 29, 321, 107, -1000, -1000, 294, -1000, -3,
	79, -1000, 254, 262, 306, 247, 290, 40, 56, 51,
	-1000, 29, 91, -1000, 243, 241, -1000, 445, -10, -1000,
	-1000, -1000, 66, 61, 56, 51, -1000, -1000, -1000, -1000,
	-1000, 321, -1000, -1000, 222, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 56, 51, 29, 29, -1000, -1000,
	107, 11, 263, 254, 321, 262, 237, 233, 106, 290,
	51, 56, 107, 107, 155, -1000, 87, 99, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 249, 107, 107, 390, -1000, -1000, -1000, -14,
	-1000, -1000, -28, 415, 304, -1000, -1000, -1000, -1000, 213,
	-1000, -1000, 36, -9, 211, -1000, -1000, -1000, -1000, 269,
	189, -1000, -1000, -1000, 445, 415, 85, 231, 229, -1000,
	-1000, -1000, -1000, -1000, 151, 142, 141, 271, 48, 238,
	238, 491, 457, 238, 238, 48, 48, 238, 48, 271,
	238, 415, -1000, -1000, -1000, 262, 29, -9, 3, 289,
	-1000, -1000, 56, 51, 303, 263, -1000, 217, -19, 86,
	-1000, 321, 148, -1000, 357, 20, -1000, 233, 198, 305,
	107, 107, -1000, -1000, -1000, 191, -1000, -1000, -19, 107,
	415, 279, 45, -1000, 30, -1000, 86, -1000, -1000, -1000,
	269, 107, 107, -1000, -1000, 445, 415, 137, 115, -1000,
	-13, 276, -1000, 6, -1000, 162, 184, -1000, 227, 273,
	210, -1000, -1000, -1000, -1000, 188, -1000, -1000, -23, 86,
	107, -1000, -1000, -1000, -1000, -1000, 97, 205, -1000, -34,
	86, -1000, -1000, -1000, 112, 302, -1000, 226, -1000, -1000,
	201, 87, 296, 98, 172, -1000, -1000,
}
var yyPgo = [...]int{

	0, 7, 25, 378, 377, 0, 374, 373, 372, 371,
	31, 370, 369, 35, 367, 26, 363, 362, 358, 356,
	355, 353, 19, 15, 351, 348, 346, 60, 33, 4,
	345, 6, 17, 56, 20, 219, 16, 166, 344, 12,
	93, 10, 14, 13, 27, 340, 339, 335, 23, 334,
	1, 332, 2, 325, 322, 8, 318, 315, 312, 310,
}
var yyR1 = [...]int{

	0, 59, 59, 59, 59, 59, 13, 13, 13, 14,
	14, 14, 33, 33, 33, 33, 33, 33, 48, 48,
	31, 31, 1, 1, 50, 51, 51, 49, 49, 39,
	37, 53, 53, 12, 12, 12, 12, 28, 28, 28,
	27, 27, 27, 27, 27, 27, 54, 36, 36, 36,
	36, 38, 38, 17, 17, 18, 2, 2, 8, 8,
	15, 16, 19, 19, 6, 35, 35, 35, 35, 35,
	35, 35, 11, 11, 7, 7, 7, 7, 42, 42,
	42, 42, 10, 10, 9, 9, 9, 9, 34, 34,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 44, 44, 45, 45, 46,
	46, 46, 56, 56, 56, 47, 47, 47, 47, 47,
	47, 43, 43, 26, 26, 23, 23, 25, 25, 22,
	22, 24, 24, 20, 20, 21, 21, 30, 30, 30,
	29, 3, 3, 3, 4, 4, 52, 52, 58, 58,
	55, 55, 57, 57, 40, 40, 41, 41, 5, 5,
	5,
}
var yyR2 = [...]int{

	0, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 3, 3, 3, 2, 1, 0, 3, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 5, 5, 3, 5, 1, 1, 1, 3,
	9, 3, 1, 2, 2, 1, 1, 1, 3, 3,
	3, 2, 4, 0, 1, 3, 2, 0, 1, 1,
	3, 3, 3, 0, 1, 3, 2, 0, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 0, 1, 0, 2,
	1, 0, 2, 1, 0, 2, 2, 4, 5, 1,
	0, 1, 1, 4, 0, 2, 0, 2, 0, 2,
	0, 2, 0, 2, 0, 3, 0, 3, 1, 0,
	2, 1, 1, 0, 1, 1, 1, 2, 10, 5,
	1, 2, 1, 1, 4, 4, 4, 4, 1, 1,
	4,
}
var yyChk = [...]int{

	-1000, -59, 67, 68, 69, 2, 10, -14, -13, -15,
	-17, -18, -16, -37, -19, -4, -35, -6, -5, -31,
	-40, 15, 12, 22, 47, 59, -32, -33, -48, -27,
	-40, -39, -37, -53, -5, -31, -52, -50, -51, -49,
	-54, 15, 12, 16, -1, 21, 54, 55, 44, 45,
	33, 26, 36, -37, -5, -31, 6, -2, 46, 50,
	24, -44, 14, -10, 13, -11, 5, 15, 7, -35,
	-31, -5, 24, 24, -15, 23, 15, 15, 26, 27,
	28, 29, 49, 53, 30, 31, 32, 33, 34, 35,
	36, 4, 48, 24, 24, -33, -32, 16, -13, -8,
	-15, -37, -20, 42, -45, -43, -55, -57, 9, -1,
	-58, -52, 16, -44, -9, -34, -32, -39, -10, 15,
	-12, -36, -38, -41, -33, 14, -5, 60, 61, -40,
	-5, -5, -5, 19, -50, -50, 22, -33, -33, -33,
	-33, -33, -33, -33, -33, -33, -33, -33, -33, -33,
	-33, 14, -37, -37, 19, 64, -2, -21, 58, -28,
	-27, -48, -5, -31, -46, 5, 9, 36, -22, 51,
	17, 7, -7, -42, -33, -41, 19, 7, -28, 4,
	15, 15, 19, 19, 19, -28, -10, -15, -22, 42,
	7, -47, 5, -43, 16, -23, 56, -52, -34, 19,
	7, 39, 39, -36, 18, -33, 14, -5, -5, 18,
	-23, -30, -29, -5, -27, -56, 7, -55, 41, -1,
	36, -52, -42, -5, -5, -28, 19, 19, -24, 52,
	7, -3, 40, 43, 18, -55, 15, 16, 18, -25,
	57, -52, -29, 19, -52, 16, -26, 63, -52, 19,
	5, 15, 16, -50, 5, 19, 16,
}
var yyDef = [...]int{

	0, -2, 0, 0, 0, 5, 4, 1, 9, 6,
	7, 8, 106, 83, 73, 0, 62, 0, -2, -2,
	65, 0, 158, 159, 0, 0, -2, 0, 42, 12,
	13, 14, 15, 17, -2, -2, 40, 41, 43, 44,
	45, 0, 158, 146, 0, 24, 25, 26, 27, 28,
	46, 22, 23, 3, 144, 145, 11, 0, 56, 57,
	0, 134, 108, 106, 87, 83, 0, 36, 71, 63,
	66, 67, 0, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 16, 147, 10, 0,
	58, 54, 136, 39, 111, 107, 121, 122, 150, 0,
	152, 153, 146, 130, 0, 84, -2, -2, 61, 77,
	0, 35, 47, 48, 49, 39, -2, 0, 0, 69,
	70, 20, 21, 68, 0, 0, 0, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 39, 31, 32, 29, 83, 0, 130, 0, 133,
	38, 42, 18, 19, 120, 110, 151, 0, 126, 0,
	82, 86, 0, 74, 78, 79, 30, 34, 0, 0,
	0, 0, 160, 154, 155, 0, 55, 59, 126, 139,
	0, 114, 119, 109, 0, 53, 0, 129, 85, 72,
	76, 0, 0, 33, 50, 51, 39, 0, 0, 104,
	132, 135, 138, 143, 37, 0, 113, 115, 116, 0,
	0, 125, 75, 80, 81, 0, 156, 157, 128, 0,
	0, 140, 141, 142, 105, 112, 0, 149, 52, 124,
	0, 131, 137, 117, 0, 0, 60, 0, 127, 118,
	0, 0, 0, 0, 0, 123, 148,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:136
		{
			yylex.(*parser).parseResult = yyDollar[2].node
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:140
		{
			yylex.(*parser).parseResult = yyDollar[2].node
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:144
		{
			yylex.(*parser).parseResult = yyDollar[2].node
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:149
		{
			yylex.(*parser).unexpected("", "")
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:155
		{
			yyVAL.node = yyDollar[1].node
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:157
		{
			yyVAL.node = yyDollar[1].node
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:159
		{
			yyVAL.node = yyDollar[1].node
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:163
		{
			yyVAL.node = Stmts{yyDollar[1].node}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:167
		{
			arr := yyDollar[1].node.(Stmts)
			arr = append(arr, yyDollar[3].node)
			yyVAL.node = arr
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:173
		{
			yyVAL.node = yyDollar[1].node
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:183
		{
			yyVAL.node = &Identifier{Name: yyDollar[1].item.Val}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:187
		{
			yyVAL.node = yyDollar[1].node
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:193
		{
			yyVAL.node = &AttrExpr{
				Obj:  &Identifier{Name: yyDollar[1].item.Val},
				Attr: &Identifier{Name: yyDollar[3].item.Val},
			}
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:200
		{
			yyVAL.node = &AttrExpr{
				Obj:  yyDollar[1].node.(*AttrExpr),
				Attr: &Identifier{Name: yyDollar[3].item.Val},
			}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:213
		{
			yyVAL.node = &StringLiteral{Val: yylex.(*parser).unquoteString(yyDollar[1].item.Val)}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:219
		{
			yyVAL.node = &NilLiteral{}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:223
		{
			yyVAL.node = &NilLiteral{}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:229
		{
			yyVAL.node = &BoolLiteral{Val: true}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:233
		{
			yyVAL.node = &BoolLiteral{Val: false}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:239
		{
			yyVAL.node = &ParenExpr{Param: yyDollar[2].node}
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line dql/parser/dql.y:245
		{
			yyVAL.node = yylex.(*parser).newFunc(yyDollar[1].item.Val, yyDollar[3].nodes)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:251
		{
			yyVAL.node = &CascadeFunctions{Funcs: []*FuncExpr{yyDollar[1].node.(*FuncExpr), yyDollar[3].node.(*FuncExpr)}}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:255
		{
			fc := yyDollar[1].node.(*CascadeFunctions)
			fc.Funcs = append(fc.Funcs, yyDollar[3].node.(*FuncExpr))
			yyVAL.node = fc
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:263
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:268
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:272
		{
			yyVAL.nodes = nil
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:278
		{
			nl := yyVAL.node.(NodeList)
			nl = append(nl, yyDollar[3].node)
			yyVAL.node = nl
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:284
		{
			yyVAL.node = NodeList{yyDollar[1].node}
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:288
		{
			yyVAL.node = NodeList{}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:302
		{
			yyVAL.node = &Star{}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:311
		{
			yyVAL.node = getFuncArgList(yyDollar[2].node.(NodeList))
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:317
		{
			yyVAL.node = &FuncArg{ArgName: yyDollar[1].item.Val, ArgVal: yyDollar[3].node}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line dql/parser/dql.y:321
		{
			yyVAL.node = &FuncArg{
				ArgName: yyDollar[1].item.Val,
				ArgVal:  getFuncArgList(yyDollar[4].node.(NodeList)),
			}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line dql/parser/dql.y:330
		{
			var cFuns *OuterFuncs
			chainFuncs, err := yylex.(*parser).newOuterFunc(cFuns, yyDollar[1].node.(*FuncExpr))
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			} else {
				switch chainFuncs.(type) {
				case *OuterFuncs:
					yyVAL.node = chainFuncs.(*OuterFuncs)
				case *Show:
					show := chainFuncs.(*Show)
					if yyDollar[2].nodes != nil {
						show.WhereCondition = yyDollar[2].nodes
					}
					if yyDollar[3].node != nil {
						show.TimeRange = yyDollar[3].node.(*TimeRange)
					}
					if yyDollar[4].node != nil {
						show.Limit = yyDollar[4].node.(*Limit)
					}
					if yyDollar[5].node != nil {
						show.Offset = yyDollar[5].node.(*Offset)
					}
					yyVAL.node = show
				case *DeleteFunc:
					yyVAL.node = chainFuncs.(*DeleteFunc)
				default:
					yylex.(*parser).addParseErr(nil, fmt.Errorf("outer func error"))
				}
			}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:362
		{
			cFuns := yyDollar[1].node.(*OuterFuncs)
			chainFuncs, err := yylex.(*parser).newOuterFunc(cFuns, yyDollar[3].node.(*FuncExpr))
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			}
			yyVAL.node = chainFuncs.(*OuterFuncs)
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line dql/parser/dql.y:374
		{
			m := yylex.(*parser).newLambda(yyDollar[1].node.(*DFQuery), yyDollar[2].item, yyDollar[5].nodes)
			for _, n := range yyDollar[3].nodes {
				m.Right = append(m.Right, n.(*DFQuery))
			}
			yyVAL.node = m
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:384
		{
			yyVAL.item = Item{Typ: FILTER}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:388
		{
			yyVAL.item = Item{Typ: LINK}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:394
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:398
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 60:
		yyDollar = yyS[yypt-9 : yypt+1]
//line dql/parser/dql.y:404
		{
			m := yyDollar[1].node.(*DFQuery)

			if yyDollar[2].node != nil {
				m.TimeRange = yyDollar[2].node.(*TimeRange)
			}

			if yyDollar[3].node != nil {
				m.GroupBy = yyDollar[3].node.(*GroupBy)
			}

			if yyDollar[4].node != nil {
				m.OrderBy = yyDollar[4].node.(*OrderBy)
			}

			if yyDollar[5].node != nil {
				m.Limit = yyDollar[5].node.(*Limit)
			}

			if yyDollar[6].node != nil {
				m.Offset = yyDollar[6].node.(*Offset)
			}

			if yyDollar[7].node != nil {
				m.SLimit = yyDollar[7].node.(*SLimit)
			}

			if yyDollar[8].node != nil {
				m.SOffset = yyDollar[8].node.(*SOffset)
			}

			if yyDollar[9].node != nil {
				m.TimeZone = yyDollar[9].node.(*TimeZone)
			}

			yyVAL.node = m
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:444
		{
			m := yyDollar[1].node.(*DFQuery)
			m.Targets = yylex.(*parser).newTargets(yyDollar[2].nodes)
			m.WhereCondition = yyDollar[3].nodes
			yyVAL.node = m
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:453
		{
			yyVAL.node = yyDollar[1].node
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:457
		{
			q := yyDollar[2].node.(*DFQuery)
			q.Namespace = yyDollar[1].item.Val
			yyVAL.node = q
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:465
		{
			yyVAL.item = yyDollar[1].item
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:471
		{
			q, err := yylex.(*parser).newQuery(yyDollar[1].node)
			if err != nil {
				log.Errorf("newQuery: %s", err)
			}
			yyVAL.node = q
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:479
		{
			// FIXME: only func:: support attr_expr in from-clause
			x := yyDollar[1].node.(*AttrExpr)
			q, err := yylex.(*parser).newQuery(&StringLiteral{Val: fmt.Sprintf("%s__%s", x.Obj, x.Attr)})
			if err != nil {
				log.Errorf("newQuery: %s", err)
			}
			yyVAL.node = q
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:489
		{
			q, err := yylex.(*parser).newQuery(yyDollar[1].item)
			if err != nil {
				log.Errorf("newQuery: %s", err)
			}
			yyVAL.node = q
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:497
		{
			yyVAL.node = yylex.(*parser).newSubquery(yyDollar[2].node.(*DFQuery))
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:501
		{
			q := yyDollar[1].node.(*DFQuery)
			if err := q.appendFrom(yyDollar[3].node); err != nil {
				log.Debugf("appendFrom: %s", err.Error())
			}
			yyVAL.node = q
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:509
		{
			q := yyDollar[1].node.(*DFQuery)
			if err := q.appendFrom(yyDollar[3].item.Val); err != nil {
				log.Debugf("appendFrom: %s", err.Error())
			}
			yyVAL.node = q
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:517
		{
			yyVAL.node = yyDollar[1].node
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line dql/parser/dql.y:523
		{
			yyVAL.nodes = yyDollar[3].nodes
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:527
		{
			yyVAL.nodes = nil
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:531
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:535
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:540
		{
			yyVAL.nodes = nil
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:544
		{
			nl, err := yylex.(*parser).newTarget(yyDollar[1].node, "")
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			}
			yyVAL.node = nl
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:552
		{
			nl, err := yylex.(*parser).newTarget(yyDollar[1].node, "")
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			}
			yyVAL.node = nl
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:560
		{
			nl, err := yylex.(*parser).newTarget(yyDollar[1].node, yyDollar[3].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			}
			yyVAL.node = nl
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:568
		{
			nl, err := yylex.(*parser).newTarget(yyDollar[1].node, yyDollar[3].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(nil, err)
			}
			yyVAL.node = nl
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:578
		{
			yyVAL.nodes = yylex.(*parser).newWhereConditions(yyDollar[2].nodes)
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:582
		{
			yyVAL.nodes = yylex.(*parser).newWhereConditions(nil)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:589
		{
			yyVAL.nodes = []Node{yyDollar[1].node}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:593
		{
			yyVAL.nodes = append(yyVAL.nodes, yyDollar[3].node)
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:598
		{
			yyVAL.nodes = nil
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:605
		{
			yyVAL.node = yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:609
		{
			yyVAL.node = yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:613
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:619
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:625
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:631
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:637
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:643
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:649
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:654
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:659
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:665
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:670
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			yyVAL.node = bexpr
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:675
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[3].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line dql/parser/dql.y:681
		{
			bexpr := yylex.(*parser).newBinExpr(yyDollar[1].node, yyDollar[4].node, yyDollar[2].item)
			bexpr.ReturnBool = true
			yyVAL.node = bexpr
		}
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
//line dql/parser/dql.y:689
		{
			yyVAL.node = yylex.(*parser).newTimeRangeOpt(yyDollar[2].node, yyDollar[3].node, yyDollar[4].node, yyDollar[5].duration)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:693
		{
			yyVAL.node = yylex.(*parser).newTimeRangeOpt(nil, nil, nil, time.Duration(0))
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:699
		{
			yyVAL.node = yyDollar[1].node
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:701
		{
			yyVAL.node = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:705
		{
			yyVAL.node = yyDollar[2].node
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:707
		{
			yyVAL.node = nil
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:709
		{
			yyVAL.node = nil
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:713
		{
			yyVAL.duration = yyDollar[2].duration
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:715
		{
			yyVAL.duration = time.Duration(0)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:717
		{
			yyVAL.duration = time.Duration(0)
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:721
		{
			yyVAL.node = &TimeResolution{Duration: yyDollar[2].duration}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:725
		{
			yyVAL.node = yylex.(*parser).newTimeResolution(nil, true) // Deprecated
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line dql/parser/dql.y:729
		{
			yyVAL.node = yylex.(*parser).newTimeResolution(nil, false)
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line dql/parser/dql.y:733
		{
			yyVAL.node = yylex.(*parser).newTimeResolution(yyDollar[4].node.(*NumberLiteral), false)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:737
		{
			yyVAL.node = nil
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:739
		{
			yyVAL.node = nil
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:743
		{
			yyVAL.node = yylex.(*parser).newTimeExpr(&TimeExpr{IsDuration: true, Duration: yyDollar[1].duration})
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:747
		{
			yyVAL.node = yylex.(*parser).newTimeExpr(&TimeExpr{Time: yyDollar[1].timestamp})
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line dql/parser/dql.y:753
		{
			yyVAL.node = yylex.(*parser).newTimeZone(yyDollar[3].node.(*StringLiteral))
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:757
		{
			yyVAL.node = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:761
		{
			yyVAL.node = yylex.(*parser).newOffset(yyDollar[2].node.(*NumberLiteral))
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:765
		{
			yyVAL.node = yylex.(*parser).newOffset(nil)
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:771
		{
			yyVAL.node = yylex.(*parser).newSOffset(yyDollar[2].node.(*NumberLiteral))
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:775
		{
			yyVAL.node = yylex.(*parser).newSOffset(nil)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:781
		{
			yyVAL.node = yylex.(*parser).newLimit(yyDollar[2].node.(*NumberLiteral))
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:785
		{
			yyVAL.node = yylex.(*parser).newLimit(nil)
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:791
		{
			yyVAL.node = yylex.(*parser).newSLimit(yyDollar[2].node.(*NumberLiteral))
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:795
		{
			yyVAL.node = yylex.(*parser).newSLimit(nil)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:802
		{
			nl := yyDollar[2].node.(NodeList)
			if len(nl) == 0 {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "group by list empty")
			}

			yyVAL.node = &GroupBy{List: nl}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:811
		{
			yyVAL.node = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:816
		{
			yyVAL.node = yylex.(*parser).newOrderBy(yyDollar[3].node.(NodeList))
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:820
		{
			yyVAL.node = yylex.(*parser).newOrderBy(nil)
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line dql/parser/dql.y:826
		{
			nl := yyDollar[1].node.(NodeList)
			nl = append(nl, yyDollar[3].node)
			yyVAL.node = nl
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:832
		{
			yyVAL.node = NodeList{yyDollar[1].node}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:836
		{
			yyVAL.node = NodeList{}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:842
		{
			yyVAL.node = yylex.(*parser).newOrderByElem(yyDollar[1].item.Val, yyDollar[2].item)
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line dql/parser/dql.y:849
		{
			yyVAL.item = Item{Typ: ASC}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:854
		{
			yyVAL.item = yyDollar[1].item
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:858
		{
			yyVAL.item = Item{Val: yyDollar[1].node.(*AttrExpr).String()}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:865
		{
			yyVAL.node = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:869
		{
			num := yylex.(*parser).number(yyDollar[2].item.Val)
			switch yyDollar[1].item.Typ {
			case ADD: // pass
			case SUB:
				if num.IsInt {
					num.Int = -num.Int
				} else {
					num.Float = -num.Float
				}
			}
			yyVAL.node = num
		}
	case 148:
		yyDollar = yyS[yypt-10 : yypt+1]
//line dql/parser/dql.y:885
		{
			timestr := fmt.Sprintf("%s-%02s-%02s %02s:%02s:%02s", yyDollar[1].item.Val, yyDollar[3].item.Val, yyDollar[5].item.Val, yyDollar[6].item.Val, yyDollar[8].item.Val, yyDollar[10].item.Val)
			t, err := time.ParseInLocation("2006-01-02 15:04:05", timestr, time.UTC)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid date string: %s", timestr)
			}

			yyVAL.timestamp = t
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line dql/parser/dql.y:895
		{
			timestr := fmt.Sprintf("%s-%02s-%02s", yyDollar[1].item.Val, yyDollar[3].item.Val, yyDollar[5].item.Val)
			t, err := time.ParseInLocation("2006-01-02", timestr, time.UTC)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid date string: %s", timestr)
			}
			yyVAL.timestamp = t
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:906
		{
			du, err := yylex.(*parser).parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			} else {
				yyVAL.duration = du
			}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line dql/parser/dql.y:915
		{
			du, err := yylex.(*parser).parseDuration(yyDollar[2].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[2].item.PositionRange(), err)
			} else {
				switch yyDollar[1].item.Typ {
				case ADD:
					yyVAL.duration = du
				case SUB:
					yyVAL.duration = -du
				}
			}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:932
		{
			nl := yyDollar[1].node.(*NumberLiteral)
			var t time.Time
			if nl.IsInt {
				t = time.Unix(nl.Int, 0)
			} else {
				i, f := math.Modf(nl.Float)
				t = time.Unix(int64(i), int64(f*float64(time.Second)))
			}
			yyVAL.timestamp = t
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line dql/parser/dql.y:946
		{
			yyVAL.node = &Regex{Regex: yyDollar[3].node.(*StringLiteral).Val}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line dql/parser/dql.y:950
		{
			yyVAL.node = &Regex{Regex: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line dql/parser/dql.y:956
		{
			yyVAL.node = &StaticCast{IsInt: true, Val: &Identifier{Name: yyDollar[3].item.Val}}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line dql/parser/dql.y:960
		{
			yyVAL.node = &StaticCast{IsFloat: true, Val: &Identifier{Name: yyDollar[3].item.Val}}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line dql/parser/dql.y:967
		{
			yyVAL.item.Val = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line dql/parser/dql.y:971
		{
			yyVAL.item.Val = yyDollar[3].node.(*StringLiteral).Val
		}
	}
	goto yystack /* stack new state and value */
}
