# DataKit install script for Windows
# Tue Aug 10 22:47:16 PDT 2021
# Author: tanb

# See https://stackoverflow.com/a/4647985/342348
function Write-COutput($ForegroundColor) {
    # save the current color
    $fc = $host.UI.RawUI.ForegroundColor

    # set the new color
    $host.UI.RawUI.ForegroundColor = $ForegroundColor

    # output
    if ($args) {
        Write-Output $args
    }
    else {
        $input | Write-Output
    }

    # restore the original color
    $host.UI.RawUI.ForegroundColor = $fc
}

# https://gist.github.com/markembling/173887
# usage: remove-host $file $args[1]
function remove-host([string]$filename, [string]$hostname) {
	$c = Get-Content $filename
	$newLines = @()

	foreach ($line in $c) {
		$bits = [regex]::Split($line, "\t+")
		if ($bits.count -eq 2) {
			if ($bits[1] -ne $hostname) {
				$newLines += $line
			}
		} else {
			$newLines += $line
		}
	}

	# Write file
	Clear-Content $filename
	foreach ($line in $newLines) {
		$line | Out-File -encoding ASCII -append $filename
	}
}

##########################
# Detect variables
##########################

$installer_base_url = "https://{{.InstallBaseURL}}"
$x = [Environment]::GetEnvironmentVariable("DK_INSTALLER_BASE_URL")
if ($x -ne $null) {
	$installer_base_url = $x
	Write-COutput yellow "* set install base URL to $x"
}

$domain = @(
    "static.guance.com"
    "openway.guance.com"
    "dflux-dial.guance.com"

    "static.dataflux.cn"
    "openway.dataflux.cn"
    "dflux-dial.dataflux.cn"

    "zhuyun-static-files-production.oss-cn-hangzhou.aliyuncs.com"
)

$x = [Environment]::GetEnvironmentVariable("DK_UPGRADE") 
if ($x -ne $null) {
	$upgrade = $x
	Write-COutput green ("* set upgrade" )
}

$x = [Environment]::GetEnvironmentVariable("DK_DATAWAY") 
if ($x -ne $null) {
	$dataway = $x
	Write-COutput green ("* set dataway to $dataway" )
}

$http_listen = "localhost"
$x = [Environment]::GetEnvironmentVariable("DK_HTTP_LISTEN") 
if ($x -ne $null) {
	$http_listen = $x
	Write-COutput green "* set HTTP listen to $x" 
}

$http_port = 9529
$x = [Environment]::GetEnvironmentVariable("DK_HTTP_PORT") 
if ($x -ne $null) {
	$http_port = $x
	Write-COutput green "* set HTTP port to $x" 
}

$namespace=""
$x = [Environment]::GetEnvironmentVariable("DK_NAMESPACE") 
if ($x -ne $null) {
	$namespace = $x
	Write-COutput green "* set namespace to $x" 
}

$cloud_provider=""
$x = [Environment]::GetEnvironmentVariable("DK_CLOUD_PROVIDER") 
if ($x -ne $null) {
	$cloud_provider = $x
	Write-COutput green "* set cloud provider to $x" 
}

$proxy=""
$x = [Environment]::GetEnvironmentVariable("HTTP_PROXY") 
if ($x -ne $null) {
	$proxy = $x
	Write-COutput green "* set Proxy to $x" 
}

$x = [Environment]::GetEnvironmentVariable("HTTPS_PROXY") 
if ($x -ne $null) {
	$proxy = $x
	Write-COutput green "* set Proxy to $x" 
}

# check nginx proxy
$proxy_type=""
$x = [Environment]::GetEnvironmentVariable("DK_PROXY_TYPE")
if ($x -ne $null) {
	$proxy_type = $x
	$proxy_type.ToLower()
	Write-COutput green "* found Proxy Type: $proxy_type"
	if ($proxy_type -eq "nginx") {
		# env DK_NGINX_IP has highest priority on proxy level
		$x = ""
        $x = [Environment]::GetEnvironmentVariable("DK_NGINX_IP")
        if ($x -ne $null -or $x -ne "") {
            $proxy = $x
            Write-COutput green "* got nginx Proxy $proxy"

            # 更新 hosts
            foreach ( $node in $domain )
            {
                remove-host $env:windir\System32\drivers\etc\hosts $node
                Add-Content -Path $env:windir\System32\drivers\etc\hosts -Value "`n$proxy`t$node" -Force
            }
		    $proxy=""
        }
	}
}

$env_hostname=""
$x = [Environment]::GetEnvironmentVariable("DK_HOSTNAME")
if ($x -ne $null) {
    $env_hostname=$x
    Write-COutput green "* set hostname to $x"
}

$global_host_tags=""
$x = [Environment]::GetEnvironmentVariable("DK_GLOBAL_HOST_TAGS") 
if ($x -ne $null) {
	$global_host_tags = $x
	Write-COutput green "* set global host tags $x" 
}

$global_election_tags=""
$x = [Environment]::GetEnvironmentVariable("DK_GLOBAL_ELECTION_TAGS") 
if ($x -ne $null) {
	$global_election_tags = $x
	Write-COutput green "* set global election tags $x" 
}

$install_only="0"
$x = [Environment]::GetEnvironmentVariable("DK_INSTALL_ONLY") 
if ($x -ne $null) {
	$install_only = "1"
	Write-COutput yellow "* set install only"
}

$dca_white_list=
$x = [Environment]::GetEnvironmentVariable("DK_DCA_WHITE_LIST") 
if ($x -ne $null) {
	$dca_white_list = $x
	Write-COutput yellow "* set DCA white list $x"
}

$dca_listen=""
$x = [Environment]::GetEnvironmentVariable("DK_DCA_LISTEN") 
if ($x -ne $null) {
	$dca_listen = $x
	Write-COutput yellow "* set DCA server listen address and port"
}

$dca_enable=
$x = [Environment]::GetEnvironmentVariable("DK_DCA_ENABLE")
if ($x -ne $null) {
	$dca_enable = $x
	Write-COutput yellow "* enable DCA server"
	if ($dca_white_list -eq $null) {
		Write-COutput red "DCA service is enabled, but white list is not set in DK_DCA_WHITE_LIST!"
		Exit
	}
}

$enable_pprof=
$x = [Environment]::GetEnvironmentVariable("DK_ENABLE_PPROF")
if ($x -ne $null) {
	$enable_pprof = $x
	Write-COutput yellow "* set pprof"
}

$pprof_listen=
$x = [Environment]::GetEnvironmentVariable("DK_PPROF_LISTEN")
if ($x -ne $null) {
	$pprof_listen = $x
	Write-COutput yellow "* set pprof listen address"
}

$install_log="install.log"
$x = [Environment]::GetEnvironmentVariable("DK_INSTALL_LOG")
if ($x -ne $null) {
	$install_log = $x
	Write-COutput yellow "* set install log"
}

$confd_backend=""
$confd_auth_token=""
$confd_auth_type=""
$confd_basic_auth=""
$confd_client_ca_keys=""
$confd_client_cert=""
$confd_client_key=""
$confd_client_insecure=""
$confd_backend_nodes=""
$confd_password=""
$confd_scheme=""
$confd_table=""
$confd_separator=""
$confd_username=""
$confd_app_id=""
$confd_user_id=""
$confd_role_id=""
$confd_secret_id=""
$confd_filter=""
$confd_path=""
$confd_role=""

$x = [Environment]::GetEnvironmentVariable("DK_CONFD_BACKEND")
if ($x -ne $null) {
	$confd_backend = $x
	Write-COutput yellow "* set confd backend"

	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_AUTH_TOKEN")
	if ($x -ne $null) { 
		$confd_auth_token = $x
		Write-COutput yellow "* set confd_auth_token     "
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_AUTH_TYPE")
	if ($x -ne $null) { 
		$confd_auth_type = $x
		Write-COutput yellow "* set confd_auth_type"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_BASIC_AUTH")
	if ($x -ne $null) { 
		$confd_basic_auth = $x
		Write-COutput yellow "* set confd_basic_auth"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_CLIENT_CA_KEYS")
	if ($x -ne $null) { 
		$confd_client_ca_keys = $x
		Write-COutput yellow "* set confd_client_ca_keys"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_CLIENT_CERT")
	if ($x -ne $null) { 
		$confd_client_cert = $x
		Write-COutput yellow "* set confd_client_cert"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_CLIENT_KEY")
	if ($x -ne $null) { 
		$confd_client_key = $x
		Write-COutput yellow "* set confd_client_key"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_CLIENT_INSECURE")
	if ($x -ne $null) { 
		$confd_client_insecure = $x
		Write-COutput yellow "* set confd_client_insecure"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_BACKEND_NODES")
	if ($x -ne $null) { 
		$confd_backend_nodes = $x
		Write-COutput yellow "* set confd_backend_nodes"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_PASSWORD")
	if ($x -ne $null) { 
		$confd_password = $x
		Write-COutput yellow "* set confd_password"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_SCHEME")
	if ($x -ne $null) { 
		$confd_scheme = $x
		Write-COutput yellow "* set confd_scheme"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_TABLE")
	if ($x -ne $null) { 
		$confd_table = $x
		Write-COutput yellow "* set confd_table"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_SEPARATOR")
	if ($x -ne $null) { 
		$confd_separator = $x
		Write-COutput yellow "* set confd_separator"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_USERNAME")
	if ($x -ne $null) { 
		$confd_username = $x
		Write-COutput yellow "* set confd_username"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_APP_ID")
	if ($x -ne $null) { 
		$confd_app_id = $x
		Write-COutput yellow "* set confd_app_id"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_USER_ID")
	if ($x -ne $null) { 
		$confd_user_id = $x
		Write-COutput yellow "* set confd_user_id"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_ROLE_ID")
	if ($x -ne $null) { 
		$confd_role_id = $x
		Write-COutput yellow "* set confd_role_id"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_SECRET_ID")
	if ($x -ne $null) { 
		$confd_secret_id = $x
		Write-COutput yellow "* set confd_secret_id"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_FILTER")
	if ($x -ne $null) { 
		$confd_filter = $x
		Write-COutput yellow "* set confd_filter"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_PATH")
	if ($x -ne $null) { 
		$confd_path = $x
		Write-COutput yellow "* set confd_path"
	}
	$x = [Environment]::GetEnvironmentVariable("DK_CONFD_ROLE")
	if ($x -ne $null) { 
		$confd_role = $x
		Write-COutput yellow "* set confd_role"
	}
}

$git_url=""
$x = [Environment]::GetEnvironmentVariable("DK_GIT_URL")
if ($x -ne $null) {
	$git_url = $x
	Write-COutput yellow "* set git url"
}

$git_key_path=""
$x = [Environment]::GetEnvironmentVariable("DK_GIT_KEY_PATH")
if ($x -ne $null) {
	$git_key_path = $x
	Write-COutput yellow "* set git private key path"
}

$git_key_pw=""
$x = [Environment]::GetEnvironmentVariable("DK_GIT_KEY_PW")
if ($x -ne $null) {
	$git_key_pw = $x
	Write-COutput yellow "* set git private key password"
}

$git_branch=""
$x = [Environment]::GetEnvironmentVariable("DK_GIT_BRANCH")
if ($x -ne $null) {
	$git_branch = $x
	Write-COutput yellow "* set git branch"
}

$git_pull_interval=""
$x = [Environment]::GetEnvironmentVariable("DK_GIT_INTERVAL")
if ($x -ne $null) {
	$git_pull_interval = $x
	Write-COutput yellow "* set git interval"
}

$enable_election=""
$x = [Environment]::GetEnvironmentVariable("DK_ENABLE_ELECTION")
if ($x -ne $null) {
	$enable_election = $x
	Write-COutput yellow "* set enable election"
}

$disable_404page=""
$x = [Environment]::GetEnvironmentVariable("DK_DISABLE_404PAGE")
if ($x -ne $null) {
	$disable_404page = $x
	Write-COutput yellow "* set disable 404 page"
}

$rum_origin_ip_header=""
$x = [Environment]::GetEnvironmentVariable("DK_RUM_ORIGIN_IP_HEADER")
if ($x -ne $null) {
	$rum_origin_ip_header = $x
	Write-COutput yellow "* set rum origin IP header"
}

$log_level=""
$x = [Environment]::GetEnvironmentVariable("DK_LOG_LEVEL")
if ($x -ne $null) {
	$log_level = $x
	Write-COutput yellow "* set log level"
}

$log=""
$x = [Environment]::GetEnvironmentVariable("DK_LOG")
if ($x -ne $null) {
	$log = $x
	Write-COutput yellow "* set log"
}

$gin_Log=""
$x = [Environment]::GetEnvironmentVariable("DK_GIN_LOG")
if ($x -ne $null) {
	$gin_Log = $x
	Write-COutput yellow "* set gin log"
}

$ipdb_type=""
$x = [Environment]::GetEnvironmentVariable("DK_INSTALL_IPDB")
if ($x -ne $null) {
	$ipdb_type = $x
	Write-COutput yellow "* set ipdb type"
}

$sink_metric=""
$x = [Environment]::GetEnvironmentVariable("DK_SINK_M")
if ($x -ne $null) {
	$sink_metric = $x
	Write-COutput yellow "* set sink metric"
}

$sink_network=""
$x = [Environment]::GetEnvironmentVariable("DK_SINK_N")
if ($x -ne $null) {
	$sink_network = $x
	Write-COutput yellow "* set sink network"
}

$sink_keyevent=""
$x = [Environment]::GetEnvironmentVariable("DK_SINK_K")
if ($x -ne $null) {
	$sink_keyevent = $x
	Write-COutput yellow "* set sink keyevent"
}

$sink_object=""
$x = [Environment]::GetEnvironmentVariable("DK_SINK_O")
if ($x -ne $null) {
	$sink_object = $x
	Write-COutput yellow "* set sink object"
}

$sink_custom_object=""
$x = [Environment]::GetEnvironmentVariable("DK_SINK_CO")
if ($x -ne $null) {
	$sink_custom_object = $x
	Write-COutput yellow "* set sink custom object"
}

$sink_logging=""
$x = [Environment]::GetEnvironmentVariable("DK_SINK_L")
if ($x -ne $null) {
	$sink_logging = $x
	Write-COutput yellow "* set sink logging"
}

$sink_tracing=""
$x = [Environment]::GetEnvironmentVariable("DK_SINK_T")
if ($x -ne $null) {
	$sink_tracing = $x
	Write-COutput yellow "* set sink tracing"
}

$sink_rum=""
$x = [Environment]::GetEnvironmentVariable("DK_SINK_R")
if ($x -ne $null) {
	$sink_rum = $x
	Write-COutput yellow "* set sink rum"
}

$sink_security=""
$x = [Environment]::GetEnvironmentVariable("DK_SINK_S")
if ($x -ne $null) {
	$sink_security = $x
	Write-COutput yellow "* set sink security"
}

$sink_profile=""
$x = [Environment]::GetEnvironmentVariable("DK_SINK_P")
if ($x -ne $null) {
	$sink_profile = $x
	Write-COutput yellow "* set sink profiling"
}

$log_sink_detail=""
$x = [Environment]::GetEnvironmentVariable("DK_LOG_SINK_DETAIL")
if ($x -ne $null) {
	$log_sink_detail = $x
	Write-COutput yellow "* set sink log detail"
}

##########################
# Detect arch 32 or 64
##########################
$arch="386"
if ([Environment]::Is64BitProcess -or [Environment]::Is64BitOperatingSystem) {
	$arch = "amd64"
}

$installer_url = "$installer_base_url/installer-windows-$arch-{{.Version}}.exe"
$installer=".dk-installer.exe"

##########################
# try install...
##########################
Write-COutput green "* Downloading $installer_url..."

if (Test-Path $installer) {
	Remove-Item $installer
}

Import-Module bitstransfer
$dl_installer_action = "start-bitstransfer -source $installer_url -destination $installer"
if ($proxy -ne "") {
	$dl_installer_action = "start-bitstransfer -ProxyUsage Override -ProxyList $proxy -source $installer_url -destination $installer"
}

Invoke-Expression $dl_installer_action

if ($upgrade -ne $null) { # upgrade
	$action = "$installer --install-log=${install_log} --upgrade --proxy=${proxy} --installer_base_url=${installer_base_url}"
} else { # install new datakit
	$action = "$installer --install-log=${install_log} --dataway=$dataway --listen=$http_listen --installer_base_url=${installer_base_url} --port=${http_port} --proxy=${proxy} --namespace=${namespace} --env_hostname=${env_hostname} --cloud-provider=${cloud_provider} --global-host-tags='${global_host_tags}' --global-election-tags='${global_election_tags}' --dca-enable=$dca_enable --dca-listen=$dca_listen --dca-white-list=$dca_white_list --confd-backend='${confd_backend}' --confd-auth-token='${confd_auth_token}' --confd-auth-type='${confd_auth_type}' --confd-basic-auth='${confd_basic_auth}' --confd-client-ca-keys='${confd_client_ca_keys}' --confd-client-cert='${confd_client_cert}' --confd-client-key='${confd_client_key}' --confd-client-insecure='${confd_client_insecure}' --confd-backend-nodes='${confd_backend_nodes}' --confd-password='${confd_password}' --confd-scheme='${confd_scheme}' --confd-table='${confd_table}' --confd-separator='${confd_separator}' --confd-username='${confd_username}' --confd-app-id='${confd_app_id}' --confd-user-id='${confd_user_id}' --confd-role-id='${confd_role_id}' --confd-secret-id='${confd_secret_id}' --confd-filter='${confd_filter}' --confd-path='${confd_path}' --confd-role='${confd_role}' --git-url='${git_url}' --git-key-path='${git_key_path}' --git-key-pw='${git_key_pw}' --git-branch='${git_branch}' --git-pull-interval='${git_pull_interval}' --install-only='${install_only}' --enable-election='${enable_election}' --rum-origin-ip-header='${rum_origin_ip_header}' --disable-404page='${disable_404page}' --log-level='${log_level}' --log='${log}' --gin-log='${gin_log}' --ipdb-type='${ipdb_type}' --enable-pprof='${enable_pprof}' --pprof-listen='${pprof_listen}' --sink-metric='${sink_metric}' --sink-network='${sink_network}' --sink-keyevent='${sink_keyevent}' --sink-object='${sink_object}' --sink-custom-object='${sink_custom_object}' --sink-logging='${sink_logging}' --sink-tracing='${sink_tracing}' --sink-rum='${sink_rum}' --sink-security='${sink_security}' --sink-profile='${sink_profile}' --log-sink-detail='${log_sink_detail}'"
}

Write-COutput green "action: $action"
Invoke-Expression $action

# remove installer
Remove-Item -Force -ErrorAction SilentlyContinue $installer
Remove-Item -Force -ErrorAction SilentlyContinue .\installer.ps1

# clean envs
$optional_envs="DK_DATAWAY","DK_UPGRADE","HTTP_PROXY","HTTP_PROXY","DK_HTTP_PORT","DK_HOSTNAME","DK_HTTP_LISTEN","DK_INSTALL_ONLY","DK_DCA_ENABLE","DK_DCA_WHITE_LIST","DK_PROXY_TYPE","DK_NGINX_IP","DK_GIT_URL","DK_GIT_KEY_PATH","DK_GIT_KEY_PW","DK_GIT_BRANCH","DK_GIT_INTERVAL","DK_ENABLE_ELECTION","DK_DISABLE_404PAGE","DK_RUM_ORIGIN_IP_HEADER","DK_LOG_LEVEL","DK_LOG","DK_GIN_LOG","DK_INSTALL_IPDB","DK_ENABLE_PPROF","DK_PPROF_LISTEN","DK_SINK_M","DK_SINK_N","DK_SINK_K","DK_SINK_O","DK_SINK_CO","DK_SINK_L","DK_SINK_T","DK_SINK_R","DK_SINK_S","DK_SINK_P","DK_LOG_SINK_DETAIL","DK_INSTALLER_BASE_URL"
foreach ($env in $optional_envs) {
	Remove-Item -ErrorAction SilentlyContinue Env:$env
}
