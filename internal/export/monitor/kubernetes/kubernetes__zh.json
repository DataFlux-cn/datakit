{
  "checkers": [
    {
      "jsonScript": {
        "type": "seniorMutationsCheck",
        "every": "1m",
        "range": 60,
        "title": "集群 {{cluster_name_k8s}} {{pod_name}} 重启",
        "groupBy": [
          "cluster_name_k8s",
          "node_name",
          "pod_name"
        ],
        "message": "集群{{cluster_name_k8s}} 节点 {{node_name}} {{pod_name}} 重启，请排查原因。",
        "range_2": -1,
        "targets": [
          {
            "dql": "M::`kube_pod`:(avg(`restarts`)) BY `cluster_name_k8s`, `node_name`, `pod_name`",
            "alias": "Result",
            "qtype": "dql"
          }
        ],
        "channels": [],
        "interval": 60,
        "atAccounts": [],
        "checkerOpt": {
          "rules": [
            {
              "status": "critical",
              "conditions": [
                {
                  "alias": "Result",
                  "operands": [
                    "0"
                  ],
                  "operator": ">"
                }
              ],
              "matchTimes": 1,
              "conditionLogic": "and"
            }
          ],
          "diffMode": "value",
          "direction": "up",
          "infoEvent": false,
          "threshold": {
            "value": 0,
            "status": true,
            "operator": ">"
          },
          "combineExpr": "A && B",
          "openMatchTimes": false
        },
        "noDataTitle": "",
        "periodBefore": 0,
        "noDataMessage": "",
        "atNoDataAccounts": [],
        "disableCheckEndTime": false,
        "recoverNeedPeriodCount": 2
      },
      "extend": {
        "rules": [
          {
            "status": "critical",
            "conditions": [
              {
                "alias": "Result",
                "operands": [
                  "0"
                ],
                "operator": ">"
              }
            ],
            "matchTimes": 1,
            "conditionLogic": "and"
          }
        ],
        "manager": [],
        "funcName": "",
        "querylist": [
          {
            "uuid": "bf1f9cbe-405c-4bdc-9c6c-cb9a984f02ef",
            "qtype": "dql",
            "query": {
              "q": "M::`kube_pod`:(avg(`restarts`)) BY `cluster_name_k8s`, `node_name`, `pod_name`",
              "code": "Result",
              "type": "simple",
              "alias": "",
              "field": "restarts",
              "groupBy": [
                "cluster_name_k8s",
                "node_name",
                "pod_name"
              ],
              "funcList": [],
              "fieldFunc": "avg",
              "fieldType": "float",
              "namespace": "metric",
              "dataSource": "kube_pod",
              "groupByTime": "",
              "additionalFields": null
            },
            "datasource": "dataflux"
          }
        ],
        "issueLevelUUID": "",
        "needRecoverIssue": false,
        "isNeedCreateIssue": false,
        "issueDfStatus": []
      },
      "is_disable": false,
      "tagInfo": [
        {
          "name": "Container 采集器"
        },
        {
          "name": "Kubernetes 检测库"
        }
      ],
      "secret": "",
      "type": "trigger",
      "monitorName": "default",
      "alertPolicyNames": []
    },
    {
      "jsonScript": {
        "type": "simpleCheck",
        "every": "1m",
        "title": "{{cluster_name_k8s}} 集群 {{pod_name}} 内存使用率超过 95%",
        "groupBy": [
          "cluster_name_k8s",
          "pod_name"
        ],
        "message": ">等级：{{df_status}}   \n>Pod: {{pod_name}}\n>内容：Pod  {{pod_name}}内存使用率过高，当前使用率{{Result}}\n>建议：登录集群查看 Pod 是否有异常",
        "targets": [
          {
            "dql": "M::`kube_pod`:(last(`mem_used_percent_base_limit`)) BY `cluster_name_k8s`, `pod_name`",
            "alias": "Result",
            "qtype": "dql"
          }
        ],
        "channels": [],
        "interval": 300,
        "atAccounts": [],
        "checkerOpt": {
          "rules": [
            {
              "status": "critical",
              "conditions": [
                {
                  "alias": "Result",
                  "operands": [
                    "95"
                  ],
                  "operator": ">"
                }
              ],
              "matchTimes": 1,
              "conditionLogic": "and"
            }
          ],
          "infoEvent": false,
          "openMatchTimes": true
        },
        "atNoDataAccounts": [],
        "disableCheckEndTime": false,
        "recoverNeedPeriodCount": 1
      },
      "extend": {
        "rules": [
          {
            "status": "critical",
            "conditions": [
              {
                "alias": "Result",
                "operands": [
                  "95"
                ],
                "operator": ">"
              }
            ],
            "matchTimes": 1,
            "conditionLogic": "and"
          }
        ],
        "manager": [],
        "funcName": "",
        "querylist": [
          {
            "uuid": "e0eb8c47-4349-4a89-8ad5-5e91c0a19e95",
            "qtype": "dql",
            "query": {
              "q": "M::`kube_pod`:(last(`mem_used_percent_base_limit`)) BY `cluster_name_k8s`, `pod_name`",
              "code": "Result",
              "fill": null,
              "type": "simple",
              "alias": "",
              "field": "mem_used_percent_base_limit",
              "fillNum": null,
              "filters": [],
              "groupBy": [
                "cluster_name_k8s",
                "pod_name"
              ],
              "labelOp": "",
              "funcList": [],
              "fieldFunc": "last",
              "fieldType": "float",
              "namespace": "metric",
              "dataSource": "kube_pod",
              "queryFuncs": [],
              "withLabels": [],
              "groupByTime": ""
            },
            "datasource": "dataflux"
          }
        ],
        "issueLevelUUID": "",
        "needRecoverIssue": false,
        "isNeedCreateIssue": false,
        "issueDfStatus": []
      },
      "is_disable": true,
      "tagInfo": [
        {
          "name": "Container 采集器"
        },
        {
          "name": "Kubernetes 检测库"
        }
      ],
      "secret": "",
      "type": "trigger",
      "monitorName": "default",
      "alertPolicyNames": []
    },
    {
      "jsonScript": {
        "type": "simpleCheck",
        "every": "1m",
        "title": "{{cluster_name_k8s}} 集群 {{pod_name}} CPU 使用率超过 95%",
        "groupBy": [
          "cluster_name_k8s",
          " pod_name"
        ],
        "message": ">等级：{{df_status}}   \n>Pod：{{pod_name}}}}\n>内容：Pod  {{pod_name}} CPU 使用率过高，当前值为 {{Result}}\n>建议：登录集群查看 Pod 是否有异常",
        "targets": [
          {
            "dql": "M::`kube_pod`:(last(`cpu_usage_base100`)) BY `cluster_name_k8s`, ` pod_name`",
            "alias": "Result",
            "qtype": "dql"
          }
        ],
        "channels": [],
        "interval": 60,
        "atAccounts": [],
        "checkerOpt": {
          "rules": [
            {
              "status": "critical",
              "conditions": [
                {
                  "alias": "Result",
                  "operands": [
                    "95"
                  ],
                  "operator": ">"
                }
              ],
              "conditionLogic": "and"
            }
          ],
          "infoEvent": false,
          "openMatchTimes": true
        },
        "atNoDataAccounts": [],
        "disableCheckEndTime": false,
        "recoverNeedPeriodCount": 1
      },
      "extend": {
        "rules": [
          {
            "status": "critical",
            "conditions": [
              {
                "alias": "Result",
                "operands": [
                  "95"
                ],
                "operator": ">"
              }
            ],
            "conditionLogic": "and"
          }
        ],
        "manager": [],
        "funcName": "",
        "querylist": [
          {
            "uuid": "e0eb8c47-4349-4a89-8ad5-5e91c0a19e95",
            "qtype": "dql",
            "query": {
              "q": "M::`kube_pod`:(last(`cpu_usage_base100`)) BY `cluster_name_k8s`, ` pod_name`",
              "code": "Result",
              "type": "simple",
              "alias": "",
              "field": "cpu_usage_base100",
              "filters": [],
              "groupBy": [
                "cluster_name_k8s",
                " pod_name"
              ],
              "funcList": [],
              "fieldFunc": "last",
              "fieldType": "float",
              "namespace": "metric",
              "dataSource": "kube_pod",
              "groupByTime": "",
              "additionalFields": null
            },
            "datasource": "dataflux"
          }
        ],
        "issueLevelUUID": "",
        "needRecoverIssue": false,
        "isNeedCreateIssue": false,
        "issueDfStatus": []
      },
      "is_disable": true,
      "tagInfo": [
        {
          "name": "Container 采集器"
        },
        {
          "name": "Kubernetes 检测库"
        }
      ],
      "secret": "",
      "type": "trigger",
      "monitorName": "default",
      "alertPolicyNames": []
    },
    {
      "jsonScript": {
        "type": "simpleCheck",
        "every": "5m",
        "title": "{{ involved_name }} 生成 {{ Result }} 条 {{ reason }} 事件",
        "groupBy": [
          "reason",
          "involved_name"
        ],
        "message": "{% set dql_data = DQL(\"L::`kubernetes_events`:(last(`message`) AS `msg`) { `index` = 'default' and ( `reason` = ? and `involved_name` = ? ) } \", reason, involved_name) %}\n\n{% if  df_status != 'ok' %}\n> 等级 ：{{ df_status }}\n> 内容：{{ involved_name }} 生成 {{ Result }} 条 {{ reason }} 事件\n>事件信息：{{ dql_data.msg }}\n{% else %}\n> 等级 ：{{ df_status }}\n>内容：{{ reason }} 事件已恢复\n{% endif %}",
        "targets": [
          {
            "dql": "L('default')::`kubernetes_events`:(count(`*`)) { `reason` IN ['BackOff', 'NodeNotReady', 'NodeNotReady', 'Rebooted', 'OOMKilling', 'FailedScheduling', 'DockerHung', 'ImagePullBackOff', 'TaintManagerEviction', 'SystemOOM', 'FailedMount'] and `involved_name` != re('datakit.*') and `involved_name` != re('snapshot-server.*') } BY `reason`, `involved_name`",
            "alias": "Result",
            "qtype": "dql"
          }
        ],
        "channels": [],
        "interval": 300,
        "atAccounts": [],
        "checkerOpt": {
          "rules": [
            {
              "status": "critical",
              "conditions": [
                {
                  "alias": "Result",
                  "operands": [
                    "1"
                  ],
                  "operator": ">="
                }
              ],
              "matchTimes": 1,
              "conditionLogic": "and"
            }
          ],
          "infoEvent": false,
          "combineExpr": "A && B",
          "openMatchTimes": false
        },
        "noDataTitle": "",
        "noDataMessage": "",
        "atNoDataAccounts": [],
        "disableCheckEndTime": false,
        "recoverNeedPeriodCount": 2
      },
      "extend": {
        "rules": [
          {
            "status": "critical",
            "conditions": [
              {
                "alias": "Result",
                "operands": [
                  "1"
                ],
                "operator": ">="
              }
            ],
            "matchTimes": 1,
            "conditionLogic": "and"
          }
        ],
        "manager": [],
        "funcName": "",
        "querylist": [
          {
            "uuid": "2e2c1074-09dc-4463-b167-ab6a12bb0191",
            "qtype": "dql",
            "query": {
              "q": "L('default')::`kubernetes_events`:(count(`*`)) { `reason` IN ['BackOff', 'NodeNotReady', 'NodeNotReady', 'Rebooted', 'OOMKilling', 'FailedScheduling', 'DockerHung', 'ImagePullBackOff', 'TaintManagerEviction', 'SystemOOM', 'FailedMount'] and `involved_name` != re('datakit.*') and `involved_name` != re('snapshot-server.*') } BY `reason`, `involved_name`",
              "code": "Result",
              "fill": null,
              "type": "simple",
              "alias": "",
              "field": "*",
              "fillNum": null,
              "filters": [
                {
                  "id": "f0397160-f807-11ee-8ce3-25b33afb42e9",
                  "op": "in",
                  "name": "reason",
                  "type": "",
                  "logic": "and",
                  "value": "",
                  "values": [
                    "BackOff",
                    "NodeNotReady",
                    "NodeNotReady",
                    "Rebooted",
                    "OOMKilling",
                    "FailedScheduling",
                    "DockerHung",
                    "ImagePullBackOff",
                    "TaintManagerEviction",
                    "SystemOOM",
                    "FailedMount"
                  ]
                },
                {
                  "id": "f219a310-f807-11ee-8ce3-25b33afb42e9",
                  "op": "!=~",
                  "name": "involved_name",
                  "type": "keyword",
                  "logic": "and",
                  "value": "datakit.*",
                  "values": []
                },
                {
                  "id": "fd264fb0-f807-11ee-8ce3-25b33afb42e9",
                  "op": "!=~",
                  "name": "involved_name",
                  "type": "keyword",
                  "logic": "and",
                  "value": "snapshot-server.*",
                  "values": []
                }
              ],
              "groupBy": [
                "reason",
                "involved_name"
              ],
              "labelOp": "",
              "funcList": [],
              "fieldFunc": "count",
              "fieldType": "keyword",
              "namespace": "logging",
              "dataSource": "kubernetes_events",
              "queryFuncs": [],
              "withLabels": [],
              "groupByTime": "",
              "indexFilter": "default"
            },
            "datasource": "dataflux"
          }
        ],
        "issueLevelUUID": "",
        "needRecoverIssue": false,
        "isNeedCreateIssue": false,
        "issueDfStatus": []
      },
      "is_disable": false,
      "tagInfo": [
        {
          "name": "Container 采集器"
        },
        {
          "name": "Kubernetes 检测库"
        }
      ],
      "secret": "",
      "type": "trigger",
      "monitorName": "default",
      "alertPolicyNames": []
    }
  ]
}