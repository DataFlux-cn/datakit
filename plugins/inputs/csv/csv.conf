
[[inputs.external]]
	daemon = true/false
	cmd = 'python path/to/csv.py'
	args = [
		'-csv'              , 'http://path/to/csv.file'             ,
		'-metric'           , 'xxx-metric'                          ,
		'-columns'          , '0,1,2,3,4,-1'                        ,
		'-names'            , 'name-0,name-1,name-2,name-3,name-4' ,
		'-tags'             , '0,3,5,100'                           ,
		'-timestamp-column' , '3'                                   ,
		'-fill-columns'     , '0,2,4,6,8,'                          ,
		'-fill-op'          , 'null,abc123,dropl,dropf,42,'         ,
	]
	envs = [ ... ]

	#################################
	# args 参数说明(标 * 为必选项)
	#################################
	# -csv    : csv 文件的 HTTP 地址或文件路径
	# -metric : 指标名
	# -columns 和 -names：
	#   - 对指定的列，可重命名这些指定的列。注意 -columns 指定的列个数和 names 
	#     中指定的个数，要么相等，要么多一个（即多出来一个 -1）
	#   - 如果 -columns 中出现了 -1 这个列，则表示所有其它未指定的列，均默认采集。
	#     如果没有 -1，则只采集指定的列
	#   - 如果没有任何列需要特殊配置，-columns 配置一个 -1 即可采集所有列
	# -tags: 指定哪些列作为 tag，除此之外，其它列都是 field
	# -timestamp-column: 指定哪些列作为时间戳，如果不指定，则以程序运行的当前时间时间
	      作为数据的采集时间
	# -fill-columns 和 -fill-op: 指定特定列的填充行为
	#     `-fill-op' 示例说明
	#          - null_str : 填充空字符串
	#          - abc123   : 填充字符串 "abc123"
	#          - dropl    : 丢弃行(line)
	#          - dropf    : 丢弃字段(field)
	#          - 42       : 填充数字或字符串42(视前面的列类型而定，如前面没有，则认为是数字)



##########################################

[[inputs.external]] # object
	daemon = true/false
	cmd = 'python path/to/csv.py'
	args = [
		'-csv'               , 'http://path/to/csv/file',
		'-columns'           , '0,2,3,4,5,-1',
		'-names'             , 'n,n2,n3,n4,n5',
		'-class-column'      , '8',
		'-class-name'        , 'you-can-specify-global-class',
		'-name-column'       , '9',
		'-tags'              , '0,3,5,100',
		'-timestamp-column'  , '3',
		'-fill-columns'      , '0,2,4,6,8',
		'-fill-op'           , 'null,abc123,dropl,dropf,42',
	]
	envs = [ ... ]

	#################################
	# args 参数说明(标 * 为必选项)
	#################################
	# -csv    : csv 文件的 HTTP 地址或文件路径
	# -metric : 指标名
	# -columns 和 -names：
	#   - 对指定的列，可重命名这些指定的列。注意 -columns 指定的列个数和 names 
	#     中指定的个数，要么相等，要么多一个（即多出来一个 -1）
	#   - 如果 -columns 中出现了 -1 这个列，则表示所有其它未指定的列，均默认采集。
	#     如果没有 -1，则只采集指定的列
	#   - 如果没有任何列需要特殊配置，-columns 配置一个 -1 即可采集所有列
	# -class-column 和 -class-name：指定 csv 的哪一列作为对象的 class-name，或者
	#     通过 -class-name 直接指定一个字符串作为 class-name。如果指定后者，则忽略
	#     -class-column
	# -name-column: 指定某一列作为对象的名称
	# -tags: 指定哪些列作为 tag，除此之外，其它列都是 field
	# -timestamp-column: 指定哪些列作为时间戳，如果不指定，则以程序运行的当前时间时间
	      作为数据的采集时间
	# -fill-columns 和 -fill-op: 指定特定列的填充行为
	#     `-fill-op' 示例说明
	#          - null_str : 填充空字符串
	#          - abc123   : 填充字符串 "abc123"
	#          - dropl    : 丢弃行(line)
	#          - dropf    : 丢弃字段(field)
	#          - 42       : 填充数字或字符串42(视前面的列类型而定，如前面没有，则认为是数字)

##########################################

[inputs.csv_object]

	object_name_col_index = 1
	object_class_name_col_index = 2

	[inputs.csv.column]
		index = 0
		name = "t1"
		na_action = "ignore"  # ignore/drop/abort
		as_tag = true 

	[inputs.csv.column]
		index = 2
		name = "t2"
		na_action = "ignore"  # ignore/drop/abort
		as_tag = true 

	[inputs.csv.column]
		index = 2
		name = "t1"
		na_action = "ignore"  # ignore/drop/abort
		as_tag = true 

	[inputs.csv.column]
		index = -1

###################################################################

[inputs.csv_metric]
	metric = "xxx"

	[inputs.csv_metric.timestamp]
		index = 4
    na_action = "ignore"
    time_format = "15/08/27 10:20:06" # csv/excel 中时间格式
    time_precision = "s"

	[inputs.csv.column]
		index = 0
		name = "t1"
		type = "int"          # int/str/float
		na_action = "ignore"  # ignore/drop/abort
		as_tag = true

	#[inputs.csv.column]
	#	...
	#[inputs.csv.column]
	#	...
